{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to pg-structure\n\n\npg-structure\n is a Node.js library to get structure of a \nPostgreSQL\n database automatically as a detailed object.\n\n\n\n    \n\n        \n\n            \nTested\n\n            Every part of the library is tested.\n        \n\n        \n\n            \nDocumented\n\n            Everything is documented, no hidden features.\n        \n\n        \n\n            \nUtilitarian\n\n            Beyond database objects (i.e. \nmany to many relation\n).\n        \n\n    \n\n\n\n\n\npg-structure examines given PostgreSQL database by reverse engineering and lets you easily code, analyze, operate on PostgreSQL database structure by providing details about \nDB\n, \nSchema\n, \nTable\n, \nColumn\n, \nConstraint\n and \nRelation\n.\n\n\nCreated object can be used to auto generate documentation or ORM models from database. It is much easier to work with JS object than working manually with database.\n\n\nExample\n\n\nvar pgStructure = require('pg-structure');\n\npgStructure({database: 'db', user: 'user', password: 'password'}, ['public', 'other_schema'])\n    .then((db) =\n { return db.get('public.account').columns; }\n\n\n\nDetailed Example\n\n\nvar pgStructure = require('pg-structure');\n\npgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema'])\n    .then((db) =\n {\n        // Basic\n        var tables      = db.getSchema('public').tables;    // Array of Table objects.\n        var tableName   = tables[0].name;                   // Name of first table.\n\n        // Callback\n        db.getSchema('public').getTables(function(table, i, collection) {\n            var name = table.name;\n        });\n\n        // Long chain example for:\n        // public schema -\n cart table -\n contact_id columns -\n foreign key constraint of contact_id\n        // -\n table of the constraint -\n name of the referenced table\n        var name     = db.get('public.cart.contact_id').foreignKeyConstraint.referencedTable.name;\n        var sameName = db.getSchema('public').getTable('cart').getColumn('contact_id').foreignKeyConstraint.referencedTable.name;\n\n        // Many to many relation:\n        var joinTable = db.get('public.cart_line_item').m2mrelations[0].joinTable;\n    })\n    .catch((err) =\n {\n        console.log(err);\n    });\n\n\n\nFeatures\n\n\n\n\nFully tested\n\n\nFully documented with JSDOC and HTML (HTML docs are in doc directory)\n\n\nAll PostgreSQL data types including array, JSON and HSTore\n\n\nSupport composite keys (Multiple field keys)\n\n\nSchema support\n\n\nConstraints (Primary Key, Foreign Key, Unique).\n\n\nSupports multi-column constraints.\n\n\nIdentifies one to many (hasMany) relationships.\n\n\nIdentifies reverse of one to many (belongsTo) relationships\n\n\nIdentifies all possible many to many (belongs to many \n has many through) relationships\n\n\nObjects can be accessed by name or by order. (Contains object and array referencing to this objects fields)\n\n\nObjects can be iterated via callbacks.\n\n\nVery detailed column meta data:\n\n\nAllow null\n\n\nDescription\n\n\nAuto Increment\n\n\nonUpdate\n\n\nonDelete\n\n\netc. (Full details can be found in \nColumn\n doc)\n\n\n\n\n\n\n\n\nSpecial Thanks\n\n\npg-structure\n is developed under sponsorship of \nFortibase\n and released as open source. See \nlicense\n.\n\n\nAlso documentation is auto generated thanks to:\n\n\n\n\nMkDocs\n using a \ntheme\n provided by \nRead the Docs\n.\n\n\nMarkdown is generated by \njsdoc-to-markdown\n\n\n\n\nContributions\n\n\n\n\nFor contribution please send pull requests with tests on \nGitHub\n.\n\n\nSend bugs and feature requests to \nGitHub Issues\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-pg-structure", 
            "text": "pg-structure  is a Node.js library to get structure of a  PostgreSQL  database automatically as a detailed object.  \n     \n         \n             Tested \n            Every part of the library is tested.\n         \n         \n             Documented \n            Everything is documented, no hidden features.\n         \n         \n             Utilitarian \n            Beyond database objects (i.e.  many to many relation ).\n         \n       pg-structure examines given PostgreSQL database by reverse engineering and lets you easily code, analyze, operate on PostgreSQL database structure by providing details about  DB ,  Schema ,  Table ,  Column ,  Constraint  and  Relation .  Created object can be used to auto generate documentation or ORM models from database. It is much easier to work with JS object than working manually with database.", 
            "title": "Welcome to pg-structure"
        }, 
        {
            "location": "/#example", 
            "text": "var pgStructure = require('pg-structure');\n\npgStructure({database: 'db', user: 'user', password: 'password'}, ['public', 'other_schema'])\n    .then((db) =  { return db.get('public.account').columns; }", 
            "title": "Example"
        }, 
        {
            "location": "/#detailed-example", 
            "text": "var pgStructure = require('pg-structure');\n\npgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema'])\n    .then((db) =  {\n        // Basic\n        var tables      = db.getSchema('public').tables;    // Array of Table objects.\n        var tableName   = tables[0].name;                   // Name of first table.\n\n        // Callback\n        db.getSchema('public').getTables(function(table, i, collection) {\n            var name = table.name;\n        });\n\n        // Long chain example for:\n        // public schema -  cart table -  contact_id columns -  foreign key constraint of contact_id\n        // -  table of the constraint -  name of the referenced table\n        var name     = db.get('public.cart.contact_id').foreignKeyConstraint.referencedTable.name;\n        var sameName = db.getSchema('public').getTable('cart').getColumn('contact_id').foreignKeyConstraint.referencedTable.name;\n\n        // Many to many relation:\n        var joinTable = db.get('public.cart_line_item').m2mrelations[0].joinTable;\n    })\n    .catch((err) =  {\n        console.log(err);\n    });", 
            "title": "Detailed Example"
        }, 
        {
            "location": "/#features", 
            "text": "Fully tested  Fully documented with JSDOC and HTML (HTML docs are in doc directory)  All PostgreSQL data types including array, JSON and HSTore  Support composite keys (Multiple field keys)  Schema support  Constraints (Primary Key, Foreign Key, Unique).  Supports multi-column constraints.  Identifies one to many (hasMany) relationships.  Identifies reverse of one to many (belongsTo) relationships  Identifies all possible many to many (belongs to many   has many through) relationships  Objects can be accessed by name or by order. (Contains object and array referencing to this objects fields)  Objects can be iterated via callbacks.  Very detailed column meta data:  Allow null  Description  Auto Increment  onUpdate  onDelete  etc. (Full details can be found in  Column  doc)", 
            "title": "Features"
        }, 
        {
            "location": "/#special-thanks", 
            "text": "pg-structure  is developed under sponsorship of  Fortibase  and released as open source. See  license .  Also documentation is auto generated thanks to:   MkDocs  using a  theme  provided by  Read the Docs .  Markdown is generated by  jsdoc-to-markdown", 
            "title": "Special Thanks"
        }, 
        {
            "location": "/#contributions", 
            "text": "For contribution please send pull requests with tests on  GitHub .  Send bugs and feature requests to  GitHub Issues .", 
            "title": "Contributions"
        }, 
        {
            "location": "/concepts/", 
            "text": "Database Objects vs. pg-structure Objects\n\n\nIn this documentation \ndatabase objects\n means database parts provided by PostgreSQL such as table, column, constraint etc. Sometimes those objects are simply refereed as \ndatabase\n as a general term in this documentation.\n\n\npg-structure objects\n means object instances provided by pg-structure classes.\n\n\nObjects (Instances)\n\n\nIn \npg-structure\n database objects such as Schema, Column etc. are represented by JavaScript objects such as \nSchema\n, \nColumn\n etc.\n\n\npgStructure(connectionArgs, schemas).then((db) =\n {\n    // db is an DB object.\n});\n\n\n\n\nAttributes\n\n\npg-structure\n objects have read only attributes to access various database objects' details. Attributes are \nread only\n and formed as \nnouns\n.\n\n\n\n\nSingular named attributes such as \ntable#name\n contains single data which is a simple JavaScript type.\n\n\nPlural named attributes such as \ntable#columns\n contains array of related objects.\n\n\nPlural named attributes with suffix \nByName\n such as \ntable#columnsByName\n contains a simple object as key/value pairs. Keys are object's names, values are related objects.\n\n\n\n\nMethods\n\n\npg-structure\n also provides methods to access database details.\n\n\nMost of the methods which returns array of objects have equivalent attributes. For example \ntable#columns\n and \ntable#getColumns\n. They are provided for convenience. They may be called with callbacks or for their return value. Even some methods executes callbacks, pg-structure methods are synchronous. \n\n\nMethods are named as verbs like \nTable#getPrimaryKeys\n or as question like terms such as \nColumn#isSerial\n or \nTable#columnExists\n.\n\n\nCallbacks\n\n\nAs described in previous section, some methods may be called with a callback function. They are executed synchronously for each object resulted by method call. Those are object collection returning functions. Their callback signature are usually \nfunction (object, index, collection)\n.\n\n\nschema.getTables(function(table, i, collection) {\n//                          \u2191    \u2191        ^---- All tables of given schema.\n//                          |    ------ Position of the table in array.\n//                          ------ Individual table object.\n    var name = table.name;\n});\n\n\n\n\nget\n shortcut\n\n\nDB\n, \nschema\n, \ntable\n classes provide \nget\n method for a shortcut. This method may be used to save a few key strokes.\n\n\nFor example all below are equal:\n\n\nvar userColumn      = db.get('public.account.user_name');\nvar sameColumn      = db.getSchema('public').getTable('account').getColumn('user_name');\nvar againSameColumn = db.schemasByName.public.tablesByName.account.columnsByName.user_name;\n\n\n\n\nRelation\n Classes vs. Foreign Key Constraint\n\n\npg-structure\n Foreign Key Constraint objects represent directly PostgreSQL foreign key constraints.\n\n\nDevelopers and ORM users need to have more information about relations than present in foreign key constraints. For example many to many relationships and many to one relationships are not available in database engine. \npg-structure\n provides \nO2MRelation\n, \nM2MRelation\n and \nM2ORelation\n classes to answer those needs.", 
            "title": "Concepts"
        }, 
        {
            "location": "/concepts/#database-objects-vs-pg-structure-objects", 
            "text": "In this documentation  database objects  means database parts provided by PostgreSQL such as table, column, constraint etc. Sometimes those objects are simply refereed as  database  as a general term in this documentation.  pg-structure objects  means object instances provided by pg-structure classes.", 
            "title": "Database Objects vs. pg-structure Objects"
        }, 
        {
            "location": "/concepts/#objects-instances", 
            "text": "In  pg-structure  database objects such as Schema, Column etc. are represented by JavaScript objects such as  Schema ,  Column  etc.  pgStructure(connectionArgs, schemas).then((db) =  {\n    // db is an DB object.\n});", 
            "title": "Objects (Instances)"
        }, 
        {
            "location": "/concepts/#attributes", 
            "text": "pg-structure  objects have read only attributes to access various database objects' details. Attributes are  read only  and formed as  nouns .   Singular named attributes such as  table#name  contains single data which is a simple JavaScript type.  Plural named attributes such as  table#columns  contains array of related objects.  Plural named attributes with suffix  ByName  such as  table#columnsByName  contains a simple object as key/value pairs. Keys are object's names, values are related objects.", 
            "title": "Attributes"
        }, 
        {
            "location": "/concepts/#methods", 
            "text": "pg-structure  also provides methods to access database details.  Most of the methods which returns array of objects have equivalent attributes. For example  table#columns  and  table#getColumns . They are provided for convenience. They may be called with callbacks or for their return value. Even some methods executes callbacks, pg-structure methods are synchronous.   Methods are named as verbs like  Table#getPrimaryKeys  or as question like terms such as  Column#isSerial  or  Table#columnExists .", 
            "title": "Methods"
        }, 
        {
            "location": "/concepts/#callbacks", 
            "text": "As described in previous section, some methods may be called with a callback function. They are executed synchronously for each object resulted by method call. Those are object collection returning functions. Their callback signature are usually  function (object, index, collection) .  schema.getTables(function(table, i, collection) {\n//                          \u2191    \u2191        ^---- All tables of given schema.\n//                          |    ------ Position of the table in array.\n//                          ------ Individual table object.\n    var name = table.name;\n});", 
            "title": "Callbacks"
        }, 
        {
            "location": "/concepts/#get-shortcut", 
            "text": "DB ,  schema ,  table  classes provide  get  method for a shortcut. This method may be used to save a few key strokes.  For example all below are equal:  var userColumn      = db.get('public.account.user_name');\nvar sameColumn      = db.getSchema('public').getTable('account').getColumn('user_name');\nvar againSameColumn = db.schemasByName.public.tablesByName.account.columnsByName.user_name;", 
            "title": "get shortcut"
        }, 
        {
            "location": "/concepts/#relation-classes-vs-foreign-key-constraint", 
            "text": "pg-structure  Foreign Key Constraint objects represent directly PostgreSQL foreign key constraints.  Developers and ORM users need to have more information about relations than present in foreign key constraints. For example many to many relationships and many to one relationships are not available in database engine.  pg-structure  provides  O2MRelation ,  M2MRelation  and  M2ORelation  classes to answer those needs.", 
            "title": "Relation Classes vs. Foreign Key Constraint"
        }, 
        {
            "location": "/examples/", 
            "text": "Database Schema\n\n\n\n\nExamples are based on a sample database schema above. \n\n\nExamples\n\n\nGet Tables\n\n\nvar tablesArray  = db.get('public').tables;         // [ size {}, color {}, line_item {} ... ]\nvar tablesObject = db.get('public').tablesByName;   // { size: {}, color: {}, line_item: {} ... }\n\n\n\n\nGet Columns\n\n\nvar columnsArray  = db.get('public.product').columns;         // [ id {}, name {}, color_id {} ... ]\nvar columnsObject = db.get('public.product').columnsByName;   // { id: {}, name: {}, color_id: {} ... }\n\n\n\n\nGet Primary Keys\n\n\nvar pkArray  = db.get('public.product').primaryKeyColumns;         // [ id {} ]\nvar pkObject = db.get('public.product').primaryKeyColumnsByName;   // { id: {} }\n\n\n\n\nGet Foreign Key Columns\n\n\nTo get all foreign key columns of all foreign key constraint in a table:\n\n\nvar fkArray  = db.get('public.product').foreignKeyColumns;         // [ color_id {}, vendor_id {}, size_id {} ]\nvar fkObject = db.get('public.product').foreignKeyColumnsByName;   // { color_id: {}, vendor_id: {}, size_id: {} }\n\n\n\n\nTo get foreign key columns of a specific constraint:\n\n\nvar fkArray  = db.get('public.product').foreignKeyConstraintsByName.vendor_has_products.columns; // [ vendor_id {} ]\n\n\n\n\nOne to Many Relation\n\n\nvar  relation         = product.o2mRelations[0];              // RELATION:    product ---\n line_item\nvar  constraint       = relation.constraint;                  // CONSTRAINT:           ^-- product_has_carts\nvar  sourceTable      = relation.sourceTable;                 // TABLE:       product\nvar  targetTable      = relation.targetTable;                 // TABLE:       line_item\nvar  FKColumn         = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nvar  sourcePKColumn   = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)\n\n\n\n\nMany to Many Relation\n\n\nvar relation             = product.m2mRelations[0];              // RELATION:    product ---\n line_item \n--- cart\nvar sourceConstraint     = relation.sourceConstraint;            // CONSTRAINT:           ^-- product_has_carts\nvar targetConstraint     = relation.targetConstraint;            // CONSTRAINT:       cart_has_products --^\nvar sourceTable          = relation.sourceTable;                 // TABLE:       product\nvar targetTable          = relation.targetTable;                 // TABLE:       cart\nvar sourceJoinFKColumn   = relation.sourceConstraint.columns[0]; // COLUMN:      product_id  (from line_item table)\nvar targetJoinFKColumn   = relation.targetConstraint.columns[0]; // COLUMN:      cart_id     (from line_item table)\nvar sourcePKColumn       = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)\nvar targetPKColumn       = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from cart table)\n\n\n\n\nMany to One Relation\n\n\nvar  relation     = line_item.m2oRelations[0];            // RELATION:    line_item \n---- product\nvar  constraint   = relation.constraint;                  // CONSTRAINT:               ^-- product_has_carts\nvar  sourceTable  = relation.sourceTable;                 // TABLE:       line_item\nvar  targetTable  = relation.targetTable;                 // TABLE:       product\nvar  FKColumn     = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nvar  PKColumn     = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from product table)", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#database-schema", 
            "text": "Examples are based on a sample database schema above.", 
            "title": "Database Schema"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "Get Tables  var tablesArray  = db.get('public').tables;         // [ size {}, color {}, line_item {} ... ]\nvar tablesObject = db.get('public').tablesByName;   // { size: {}, color: {}, line_item: {} ... }  Get Columns  var columnsArray  = db.get('public.product').columns;         // [ id {}, name {}, color_id {} ... ]\nvar columnsObject = db.get('public.product').columnsByName;   // { id: {}, name: {}, color_id: {} ... }  Get Primary Keys  var pkArray  = db.get('public.product').primaryKeyColumns;         // [ id {} ]\nvar pkObject = db.get('public.product').primaryKeyColumnsByName;   // { id: {} }  Get Foreign Key Columns  To get all foreign key columns of all foreign key constraint in a table:  var fkArray  = db.get('public.product').foreignKeyColumns;         // [ color_id {}, vendor_id {}, size_id {} ]\nvar fkObject = db.get('public.product').foreignKeyColumnsByName;   // { color_id: {}, vendor_id: {}, size_id: {} }  To get foreign key columns of a specific constraint:  var fkArray  = db.get('public.product').foreignKeyConstraintsByName.vendor_has_products.columns; // [ vendor_id {} ]  One to Many Relation  var  relation         = product.o2mRelations[0];              // RELATION:    product ---  line_item\nvar  constraint       = relation.constraint;                  // CONSTRAINT:           ^-- product_has_carts\nvar  sourceTable      = relation.sourceTable;                 // TABLE:       product\nvar  targetTable      = relation.targetTable;                 // TABLE:       line_item\nvar  FKColumn         = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nvar  sourcePKColumn   = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)  Many to Many Relation  var relation             = product.m2mRelations[0];              // RELATION:    product ---  line_item  --- cart\nvar sourceConstraint     = relation.sourceConstraint;            // CONSTRAINT:           ^-- product_has_carts\nvar targetConstraint     = relation.targetConstraint;            // CONSTRAINT:       cart_has_products --^\nvar sourceTable          = relation.sourceTable;                 // TABLE:       product\nvar targetTable          = relation.targetTable;                 // TABLE:       cart\nvar sourceJoinFKColumn   = relation.sourceConstraint.columns[0]; // COLUMN:      product_id  (from line_item table)\nvar targetJoinFKColumn   = relation.targetConstraint.columns[0]; // COLUMN:      cart_id     (from line_item table)\nvar sourcePKColumn       = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)\nvar targetPKColumn       = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from cart table)  Many to One Relation  var  relation     = line_item.m2oRelations[0];            // RELATION:    line_item  ---- product\nvar  constraint   = relation.constraint;                  // CONSTRAINT:               ^-- product_has_carts\nvar  sourceTable  = relation.sourceTable;                 // TABLE:       line_item\nvar  targetTable  = relation.targetTable;                 // TABLE:       product\nvar  FKColumn     = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nvar  PKColumn     = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from product table)", 
            "title": "Examples"
        }, 
        {
            "location": "/history/", 
            "text": "Note\n: Version history for minimal documentation updates are not listed here to prevent cluttering.\n\n\nWhy v2 has incompatible changes?\n\n\nVersion 2 is designed to be more elegant and more intuitive. Methods are changed to read only attributes and new methods\n are easily distinguished from attributes with verb based names such as \ncolumns\n vs \ngetColumns()\n.\n\n\nAdditionally new \nRelation\n classes are added. Some of the features are moved from \nConstraint\n to \nRelation\n,\n because some features are technically not available in DB Engine and those features misrepresent \nConstraint\n.\n\n\nFor example many to many relations are virtual relationships which do not actually exist in database. They are\ntables joined via a third join table.\n\n\nHistory \n Release Notes\n\n\n2.0.0-alpha.2  / 2015-11-17\n\n\n\n\nAdded: Index class is added.\n\n\nFixed: Column#unique was assuming that a column can have only one unique constraint. Now it returns array.\n\n\nFixed: Column#unique was ignoring unique indexes Now it considers unique indexes too.\n\n\nFixed: Many typos in constraint class documentation.\n\n\n\n\n2.0.0-alpha.1  / 2015-11-11\n\n\n\n\n BREAKING CHANGES \n\n\nCompletely rewritten.\n\n\nMethods are converted to read only attributes.\n\n\nNew methods are named as verb such as getColumn().\n\n\nNew classes added: Relation, O2MRelation (one to many), M2ORelation (many to one), M2M Relation (many to many).\n\n\nConstraint features that are technically not available in DB Engine moved from \nConstraint\n class to related \nRelation\n classes.\n\n\nDocumentation updated completely and added clearer examples.\n\n\nSome method names and attributes are more intuitive than previous version.\n\n\n\n\n1.11.1 / 2015-06-16\n\n\n\n\nAdded: JSONB support. Contributed by: viniciuspinto (https://github.com/viniciuspinto)\n\n\n\n\n1.11.0 / 2014-12-30\n\n\n\n\nAdded: Constraint.throughForeignKeyConstraintToSelf() method added.\n\n\nAdded: Winston logging.\n\n\nFixed: Many to Many relations has name collisions if join table connects more than one table and one of the tables has more than one connection to join table. Naming of many to many relations changed.\n\n\n\n\n1.10.0 / 2014-12-23\n\n\n\n\nAdded: db.includedSchemas method to get list of requested schemas to be parsed.\n\n\nAdded: db.schemaIncluded method to determine if given schema name is one of the requested schemas to be parsed.\n\n\nFix: If a table has a reference to not included schema, throws exception. Should not include its foreign key.\n\n\nDoc update.\n\n\n\n\n1.9.0 / 2014-12-12\n\n\n\n\nAdded: table.hasManyThrough.throughForeignKeyConstraint method added to constraint class.\n\n\n\n\n1.8.3 / 2014-12-10\n\n\n\n\nFix: Sequelize type length, precision.\n\n\n\n\n1.8.2 / 2014-12-10\n\n\n\n\nFix: Sequelize type date, time etc. has no length property.\n\n\nFix: Sequelize type dateonly added.\n\n\nTests added.\n\n\n\n\n1.8.0 / 2014-12-10\n\n\n\n\nAdded: Shortcut function 'get' added to db, schema and table classes.\n\n\nFix: hasManyThrough does not return foreign keys.\n\n\n\n\n1.7.0 / 2014-12-10\n\n\n\n\nAdded: onDelete and onUpdate added to hasMany and hasManyThrough relations.\n\n\n\n\n1.6.0 / 2014-12-10\n\n\n\n\nDEPRECATED: column.special function. Use column.enumValues instead.\n\n\nAdded: Tests for enum values.\n\n\nAdded: Enum support for column.sequelizeType function.\n\n\nUpdated: Documentation\n\n\n\n\n1.5.1 / 2014-12-04\n\n\n\n\nFix: Test db does not destroyed after tests.\n\n\n\n\n1.5.0 / 2014-12-04\n\n\n\n\nFix: column.default() method returns default value with type cast. From now on yype cast part is stripped.\n\n\nAdded column.defaultWithTypeCast() method for getting default values with type cast part.\n\n\nTests added for default values.\n\n\n\n\n1.4.0 / 2014-11-28\n\n\n\n\nAdded support for user-defined types.\n\n\nAdded column.udType() method to get user defined type name.\n\n\nAdded necessary tests.\n\n\n\n\n1.3.1 / 2014-11-27\n\n\n\n\nAdded history to readme.\n\n\nFix: Major error: Single schema or default 'public' schema databases throw error.\n\n\nFix: Databases without any table throw error.\n\n\nAdded tests of this fixes and table without any column.\n\n\n\n\n1.3.0 / 2014-11-27\n\n\n\n\nParameter validation added to pg-structure main function. This would ease debugging.\n\n\nFix: pg-structure.generate function was throwing error, now it calls its callback with error\nif database connection error occurs.\n\n\n\n\n1.2.0 / 2014-11-26\n\n\n\n\nFix: pg-structure callback does not get error object. Instead error is thrown. Now callback gets error object as its first parameter as expected.\n\n\ndb.schema() function now throws more informative error if referenced schema is not found in db and also not in the options of requested schemas.\n\n\ndb.schemaExist() function added.\n\n\nHistory.md file added. (This file)\n\n\n\n\n1.1.0 / 2014-11-25\n\n\n\n\ntable.foreignKeyConstraintExist() function added.\n\n\n\n\n1.0.0 / 2014-11-25\n\n\n\n\nCompletely rewritten to migrate from plain object to object oriented design.\n\n\ncolumn.sequelizeType() method added. This method gets sequelize compatible type of the column.", 
            "title": "History"
        }, 
        {
            "location": "/history/#history-release-notes", 
            "text": "2.0.0-alpha.2  / 2015-11-17   Added: Index class is added.  Fixed: Column#unique was assuming that a column can have only one unique constraint. Now it returns array.  Fixed: Column#unique was ignoring unique indexes Now it considers unique indexes too.  Fixed: Many typos in constraint class documentation.   2.0.0-alpha.1  / 2015-11-11    BREAKING CHANGES   Completely rewritten.  Methods are converted to read only attributes.  New methods are named as verb such as getColumn().  New classes added: Relation, O2MRelation (one to many), M2ORelation (many to one), M2M Relation (many to many).  Constraint features that are technically not available in DB Engine moved from  Constraint  class to related  Relation  classes.  Documentation updated completely and added clearer examples.  Some method names and attributes are more intuitive than previous version.   1.11.1 / 2015-06-16   Added: JSONB support. Contributed by: viniciuspinto (https://github.com/viniciuspinto)   1.11.0 / 2014-12-30   Added: Constraint.throughForeignKeyConstraintToSelf() method added.  Added: Winston logging.  Fixed: Many to Many relations has name collisions if join table connects more than one table and one of the tables has more than one connection to join table. Naming of many to many relations changed.   1.10.0 / 2014-12-23   Added: db.includedSchemas method to get list of requested schemas to be parsed.  Added: db.schemaIncluded method to determine if given schema name is one of the requested schemas to be parsed.  Fix: If a table has a reference to not included schema, throws exception. Should not include its foreign key.  Doc update.   1.9.0 / 2014-12-12   Added: table.hasManyThrough.throughForeignKeyConstraint method added to constraint class.   1.8.3 / 2014-12-10   Fix: Sequelize type length, precision.   1.8.2 / 2014-12-10   Fix: Sequelize type date, time etc. has no length property.  Fix: Sequelize type dateonly added.  Tests added.   1.8.0 / 2014-12-10   Added: Shortcut function 'get' added to db, schema and table classes.  Fix: hasManyThrough does not return foreign keys.   1.7.0 / 2014-12-10   Added: onDelete and onUpdate added to hasMany and hasManyThrough relations.   1.6.0 / 2014-12-10   DEPRECATED: column.special function. Use column.enumValues instead.  Added: Tests for enum values.  Added: Enum support for column.sequelizeType function.  Updated: Documentation   1.5.1 / 2014-12-04   Fix: Test db does not destroyed after tests.   1.5.0 / 2014-12-04   Fix: column.default() method returns default value with type cast. From now on yype cast part is stripped.  Added column.defaultWithTypeCast() method for getting default values with type cast part.  Tests added for default values.   1.4.0 / 2014-11-28   Added support for user-defined types.  Added column.udType() method to get user defined type name.  Added necessary tests.   1.3.1 / 2014-11-27   Added history to readme.  Fix: Major error: Single schema or default 'public' schema databases throw error.  Fix: Databases without any table throw error.  Added tests of this fixes and table without any column.   1.3.0 / 2014-11-27   Parameter validation added to pg-structure main function. This would ease debugging.  Fix: pg-structure.generate function was throwing error, now it calls its callback with error\nif database connection error occurs.   1.2.0 / 2014-11-26   Fix: pg-structure callback does not get error object. Instead error is thrown. Now callback gets error object as its first parameter as expected.  db.schema() function now throws more informative error if referenced schema is not found in db and also not in the options of requested schemas.  db.schemaExist() function added.  History.md file added. (This file)   1.1.0 / 2014-11-25   table.foreignKeyConstraintExist() function added.   1.0.0 / 2014-11-25   Completely rewritten to migrate from plain object to object oriented design.  column.sequelizeType() method added. This method gets sequelize compatible type of the column.", 
            "title": "History &amp; Release Notes"
        }, 
        {
            "location": "/license/", 
            "text": "LICENSE\n\n\nThe MIT License (MIT)\n\n\nCopyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "The MIT License (MIT)  Copyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "LICENSE"
        }, 
        {
            "location": "/report/", 
            "text": "lab\n tests and coverage report can be seen \nhere\n.", 
            "title": "Test & Coverage Report"
        }, 
        {
            "location": "/api/column/", 
            "text": "Classes\n\n\n\n\nColumn\n\n\nClass which represent a database column. Provides attributes and methods for details of the column.\n\n\n\n\n\n\nFunctions\n\n\n\n\ncreateIndexGetter([filter])\n \u21d2 \nfunction\n\n\nReturns a function which returns unique indexes of the column. Based on excludePK results includes Primary Keys or not.\n\n\n\n\n\n\n\n\nColumn\n\n\nClass which represent a database column. Provides attributes and methods for details of the column.\n\n\nKind\n: global class  \n\n\n\n\nColumn\n\n\nnew Column(args)\n\n\n.allowNull\n : \nboolean\n\n\n.arrayDimension\n : \nnumber\n\n\n.arrayType\n : \nstring\n \n \nnull\n\n\n.db\n : \nDB\n\n\n.default\n : \nstring\n \n \nnull\n\n\n.defaultWithTypeCast\n : \nstring\n \n \nnull\n\n\n.description\n : \nstring\n \n \nnull\n\n\n.domainName\n : \nstring\n \n \nnull\n\n\n.domainFullName\n : \nstring\n \n \nnull\n\n\n.enumLabels\n : \nArray.\nstring\n \n \nnull\n\n\n.enumValues\n : \nArray.\nstring\n \n \nnull\n\n\n.foreignKeyConstraint\n : \nConstraint\n \n \nnull\n\n\n.fullName\n : \nstring\n\n\n.fullCatalogName\n : \nstring\n\n\n.isAutoIncrement\n : \nboolean\n\n\n.isSerial\n : \nboolean\n\n\n.isForeignKey\n : \nboolean\n\n\n.isPrimaryKey\n : \nboolean\n\n\n.length\n : \nnumber\n \n \nnull\n\n\n.name\n : \nstring\n\n\n.notNull\n : \nboolean\n\n\n.parent\n : \nTable\n\n\n.precision\n : \nnumber\n \n \nnull\n\n\n.referencedColumn\n : \nColumn\n \n \nnull\n\n\n.scale\n : \nnumber\n \n \nnull\n\n\n.schema\n : \nSchema\n\n\n.type\n : \npostgreSQLDataType\n\n\n.table\n : \nTable\n\n\n.userDefinedType\n : \npostgreSQLDataType\n \n \nnull\n\n\n.uniqueIndexesNoPK\n : \nArray.\nIndex\n \n \nnull\n\n\n.uniqueIndexes\n : \nArray.\nIndex\n \n \nnull\n\n\n.indexes\n : \nArray.\nIndex\n \n \nnull\n\n\n.getUniqueIndexesNoPK([callback])\n \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\n.getUniqueIndexes([callback])\n \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\n.getIndexes([callback])\n \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\n\n\n\n\nnew Column(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nDatabase arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js database object.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nColumn\n instance.\n\n\n\n\n\n\n\n\n\n\ncolumn.allowNull : \nboolean\n\n\ntrue\n if column is allowed to contain null values; otherwise \nfalse\n.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \nnotNull\n.\n\n\n\n\ncolumn.arrayDimension : \nnumber\n\n\nNumber of dimensions, if the column is an array type; otherwise 0.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.arrayType : \nstring\n \n \nnull\n\n\nIf this column is an array, data type of the array. If column is not an array equals \nnull\n.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.db : \nDB\n\n\nDB\n this table belongs to.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.default : \nstring\n \n \nnull\n\n\nDefault value of the column without typecast. Default values includes single quotes except sql functions and numeric values.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \ndefaultWithTypeCast\n for default values with typecast as returned by PostgreSQL\n\n\nExample\n  \n\n\nvar column = db('crm').schema('public').table('contact').column('name');\nvar type = column.default;           // \n'George'\n\ntype = age.default;                  // 20\ntype = created_at.default;           // \nnow()\n\ntype = column.defaultWithTypeCast;   // \n'George'::character varying\n\n\n\n\n\n\n\ncolumn.defaultWithTypeCast : \nstring\n \n \nnull\n\n\nDefault expression of the column with typecast. PostgreSQL returns default values with typecast.\nDefault values includes single quotes except sql functions and numeric values. Also sql functions and numeric values\ndo not contain type cast.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \ndefault\n for accessing default values without typecast.\n\n\nExample\n  \n\n\nvar column = db('crm').schema('public').table('contact').column('name');\nvar type = column.defaultWithTypeCast;   // \n'George'::character varying\n\ntype = age.defaultWithTypeCast;          // 20\ntype = created_at.defaultWithTypeCast;   // \nnow()\n\ntype = column.default;                   // \n'George'\n\n\n\n\n\n\n\ncolumn.description : \nstring\n \n \nnull\n\n\nComment about column.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.domainName : \nstring\n \n \nnull\n\n\nIf column data type is is a domain, this equals domain name without domain schema. Otherwise null.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \ndomainFullName\n.\n\n\nExample\n  \n\n\nvar domainName = column.domainName; // i.e. 'phone_number'\n\n\n\n\n\n\ncolumn.domainFullName : \nstring\n \n \nnull\n\n\nIf column data type is is a domain, this equals domain name including domain schema. Otherwise null.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \ndomainName\n.\n\n\nExample\n  \n\n\nvar domainName = column.domainFullName; // i.e. 'public.phone_number'\n\n\n\n\n\n\ncolumn.enumLabels : \nArray.\nstring\n \n \nnull\n\n\nArray of the textual labels for enum values column may contain. If column is not an enum, then this\nequals \nundefined\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nenumValues\n\n\n\n\ncolumn.enumValues : \nArray.\nstring\n \n \nnull\n\n\nArray of the textual labels for enum values column may contain. If column is not an enum, then this\nequals \nundefined\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nenumLabels\n\n\n\n\ncolumn.foreignKeyConstraint : \nConstraint\n \n \nnull\n\n\nForeign key constraint of the column, if column is part of a foreign key constraint, null otherwise.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.fullName : \nstring\n\n\nFull name of the \nColumn\n with (.) notation.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = column.fullName; // public.account.id\n\n\n\n\n\n\ncolumn.fullCatalogName : \nstring\n\n\nFull name of the \nColumn\n with (.) notation including catalog name.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = table.fullName; // crm.public.account.id\n\n\n\n\n\n\ncolumn.isAutoIncrement : \nboolean\n\n\ntrue\n if this column has an auto incremented (\nnextval()\n) default value or defined one of \nserial\n\ntypes.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nisSerial\n\n\n\n\ncolumn.isSerial : \nboolean\n\n\ntrue\n if this column has an auto incremented (\nnextval()\n) default value or defined one of \nserial\n\ntypes.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nisAutoIncrement\n\n\n\n\ncolumn.isForeignKey : \nboolean\n\n\ntrue\n if this column is a foreign key or part of a foreign key constraint; otherwise \nfalse\n.\nPlease note that a foreign key may contain more than one column.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.isPrimaryKey : \nboolean\n\n\ntrue\n if this column is a primary key or part of a primary key constraint; otherwise \nfalse\n.\nPlease note that a primary key may contain more than one column.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.length : \nnumber\n \n \nnull\n\n\nLength of the column.\n\n For data type identified as a character or bit string type, this is the declared\nmaximum length. If column is an array, same rule applies data type of the array.\n\n For character arrays or bit string type arrays, this is the declared maximum length of the array's data type.\n\n For arrays atttypmod records type-specific data supplied at table creation time (for example, the maximum length\nof a varchar column). It is passed to type-specific input functions and length coercion functions.\n\n This value is \nundefined\n for all other data types or if no maximum length was declared.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.name : \nstring\n\n\nName of the column.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.notNull : \nboolean\n\n\ntrue\n if column is \nnot allowed\n to contain null values; otherwise \nfalse\n.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \nallowNull\n\n\n\n\ncolumn.parent : \nTable\n\n\nTable\n this column belongs to.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: Aliases \ntable\n\n\nExample\n  \n\n\nvar table = column.parent; // Table instance\n\n\n\n\n\n\ncolumn.precision : \nnumber\n \n \nnull\n\n\n\n\nIf data type identifies a numeric type, this contains the (declared or implicit) precision of\nthe type for this column. The precision indicates the number of significant digits.\n\n\nIf data type identifies a date, time, timestamp, or interval type, this column contains the (declared or implicit)\nfractional seconds precision of the type for this attribute, that is, the number of decimal digits maintained\nfollowing the decimal point in the seconds value.\n\n\nIf data type is an array. Same rules apply for the data type of the array, and this value would become precision\nof the data type of the array.\n\n\nFor all other data types, this is \nundefined\n.\n\n\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.referencedColumn : \nColumn\n \n \nnull\n\n\nReferenced column by this column. If this isn't foreign key then this is null.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.scale : \nnumber\n \n \nnull\n\n\n\n\nIf data type identifies an exact numeric type, this contains the (declared or implicit) scale\nof the type for this attribute. The scale indicates the number of significant digits to the right of the decimal point.\n\n\nIf data type is an array. Same rule applies for the data type of the array, and this value would become scale\nof the data type of the array.\n\n\nFor all other data types, this is \nundefined\n.\n\n\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.schema : \nSchema\n\n\nSchema\n this column belongs to.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.type : \npostgreSQLDataType\n\n\nData type of the column.\n\n For built-in types this is name of type.\n\n \nARRAY\n, for arrays, and type of array can be found via \narrayType\n.\n\n \nUSER-DEFINED\n for user defined types, and type of it can be found via \nuserDefinedType\n.\n\n For domain types this is not domain name, but underlying base type of that domain. Use \ndomainName\n or \ndomainFullName\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nuserDefinedType\n\n\ndomainName\n and \ndomainFullName\n\n\n\n\n\n\ncolumn.table : \nTable\n\n\nTable\n this column belongs to.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nparent\n\n\nExample\n  \n\n\nvar table = column.table; // Table instance\n\n\n\n\n\n\ncolumn.userDefinedType : \npostgreSQLDataType\n \n \nnull\n\n\nIf type of column is user defined such as composite, enumerated, this is the data type of the underlying type.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.uniqueIndexesNoPK : \nArray.\nIndex\n \n \nnull\n\n\nList of unique \nindexes\n, which column is part of. Results are ordered by index name. Excludes primary key indexes. PostgreSQL already creates a unique index for unique\n\nconstraints\n. So there is no need to look for unique constraints which will result duplicates.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \nuniqueIndexes\n for all unique indexes including primary key indexes.\n\n\n\n\ncolumn.uniqueIndexes : \nArray.\nIndex\n \n \nnull\n\n\nList of unique \nindexes\n, which column is part of. Results are ordered by index name. PostgreSQL already creates a unique index for unique\n\nconstraints\n. So there is no need to look for unique constraints which will result duplicates.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\nSee\n: \nuniqueIndexesNoPK\n for unique indexes excluding primary key indexes.\n\n\n\n\ncolumn.indexes : \nArray.\nIndex\n \n \nnull\n\n\nList of \nindexes\n, which column is part of. Results are ordered by index name.\n\n\nKind\n: instance property of \nColumn\n\n\nRead only\n: true\n\n\n\n\ncolumn.getUniqueIndexesNoPK([callback]) \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\nExecutes callback for every unique \nIndex\n or returns list of unique \nindexes\n, which column is part of.\nResults are ordered by index name. Excludes primary key indexes. PostgreSQL already creates a unique index for unique\n\nconstraints\n. So there is no need to look for unique constraints which will result duplicates.\n\n\nKind\n: instance method of \nColumn\n\n\nReturns\n: \nArray.\nIndex\n \n \nundefined\n \n \nnull\n - - Unique \nindexes\n this column is a part of.\n\n\nSee\n: \ngetUniqueIndexes\n for all unique indexes including primary key indexes.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedIndexCallback\n\n\nCallback to be executed for each unique \nIndex\n.\n\n\n\n\n\n\n\n\n\n\ncolumn.getUniqueIndexes([callback]) \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\nExecutes callback for every unique \nIndex\n or returns list of unique \nindexes\n, which column is part of.\nResults are ordered by index name. PostgreSQL already creates a unique index for unique\n\nconstraints\n. So there is no need to look for unique constraints which will result duplicates.\n\n\nKind\n: instance method of \nColumn\n\n\nReturns\n: \nArray.\nIndex\n \n \nundefined\n \n \nnull\n - - Unique \nindexes\n this column is a part of.\n\n\nSee\n: \ngetUniqueIndexesNoPK\n for all unique indexes excluding primary key indexes.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedIndexCallback\n\n\nCallback to be executed for each unique \nIndex\n.\n\n\n\n\n\n\n\n\n\n\ncolumn.getIndexes([callback]) \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\nExecutes callback for every \nIndex\n or returns list of \nindexes\n, which column is part of.\nResults are ordered by index name.\n\n\nKind\n: instance method of \nColumn\n\n\nReturns\n: \nArray.\nIndex\n \n \nundefined\n \n \nnull\n - - \nindexes\n this column is a part of.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedIndexCallback\n\n\nCallback to be executed for each \nIndex\n.\n\n\n\n\n\n\n\n\n\n\ncreateIndexGetter([filter]) \u21d2 \nfunction\n\n\nReturns a function which returns unique indexes of the column. Based on excludePK results includes Primary Keys or not.\n\n\nKind\n: global function\n\n\nReturns\n: \nfunction\n - - Getter function.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[filter]\n\n\nobject\n\n\nFilter object to use in Loki.js query.", 
            "title": "Column"
        }, 
        {
            "location": "/api/column/#classes", 
            "text": "Column  Class which represent a database column. Provides attributes and methods for details of the column.", 
            "title": "Classes"
        }, 
        {
            "location": "/api/column/#functions", 
            "text": "createIndexGetter([filter])  \u21d2  function  Returns a function which returns unique indexes of the column. Based on excludePK results includes Primary Keys or not.", 
            "title": "Functions"
        }, 
        {
            "location": "/api/column/#column", 
            "text": "Class which represent a database column. Provides attributes and methods for details of the column.  Kind : global class     Column  new Column(args)  .allowNull  :  boolean  .arrayDimension  :  number  .arrayType  :  string     null  .db  :  DB  .default  :  string     null  .defaultWithTypeCast  :  string     null  .description  :  string     null  .domainName  :  string     null  .domainFullName  :  string     null  .enumLabels  :  Array. string     null  .enumValues  :  Array. string     null  .foreignKeyConstraint  :  Constraint     null  .fullName  :  string  .fullCatalogName  :  string  .isAutoIncrement  :  boolean  .isSerial  :  boolean  .isForeignKey  :  boolean  .isPrimaryKey  :  boolean  .length  :  number     null  .name  :  string  .notNull  :  boolean  .parent  :  Table  .precision  :  number     null  .referencedColumn  :  Column     null  .scale  :  number     null  .schema  :  Schema  .type  :  postgreSQLDataType  .table  :  Table  .userDefinedType  :  postgreSQLDataType     null  .uniqueIndexesNoPK  :  Array. Index     null  .uniqueIndexes  :  Array. Index     null  .indexes  :  Array. Index     null  .getUniqueIndexesNoPK([callback])  \u21d2  Array. Index     undefined     null  .getUniqueIndexes([callback])  \u21d2  Array. Index     undefined     null  .getIndexes([callback])  \u21d2  Array. Index     undefined     null    new Column(args)     Param  Type  Description      args  Object  Database arguments.    args.registry  Loki  Loki.js database object.    args.attributes  Object  Attributes of the  Column  instance.      column.allowNull :  boolean  true  if column is allowed to contain null values; otherwise  false .  Kind : instance property of  Column  Read only : true  See :  notNull .   column.arrayDimension :  number  Number of dimensions, if the column is an array type; otherwise 0.  Kind : instance property of  Column  Read only : true   column.arrayType :  string     null  If this column is an array, data type of the array. If column is not an array equals  null .  Kind : instance property of  Column  Read only : true   column.db :  DB  DB  this table belongs to.  Kind : instance property of  Column  Read only : true   column.default :  string     null  Default value of the column without typecast. Default values includes single quotes except sql functions and numeric values.  Kind : instance property of  Column  Read only : true  See :  defaultWithTypeCast  for default values with typecast as returned by PostgreSQL  Example     var column = db('crm').schema('public').table('contact').column('name');\nvar type = column.default;           //  'George' \ntype = age.default;                  // 20\ntype = created_at.default;           //  now() \ntype = column.defaultWithTypeCast;   //  'George'::character varying    column.defaultWithTypeCast :  string     null  Default expression of the column with typecast. PostgreSQL returns default values with typecast.\nDefault values includes single quotes except sql functions and numeric values. Also sql functions and numeric values\ndo not contain type cast.  Kind : instance property of  Column  Read only : true  See :  default  for accessing default values without typecast.  Example     var column = db('crm').schema('public').table('contact').column('name');\nvar type = column.defaultWithTypeCast;   //  'George'::character varying \ntype = age.defaultWithTypeCast;          // 20\ntype = created_at.defaultWithTypeCast;   //  now() \ntype = column.default;                   //  'George'    column.description :  string     null  Comment about column.  Kind : instance property of  Column  Read only : true   column.domainName :  string     null  If column data type is is a domain, this equals domain name without domain schema. Otherwise null.  Kind : instance property of  Column  Read only : true  See :  domainFullName .  Example     var domainName = column.domainName; // i.e. 'phone_number'   column.domainFullName :  string     null  If column data type is is a domain, this equals domain name including domain schema. Otherwise null.  Kind : instance property of  Column  Read only : true  See :  domainName .  Example     var domainName = column.domainFullName; // i.e. 'public.phone_number'   column.enumLabels :  Array. string     null  Array of the textual labels for enum values column may contain. If column is not an enum, then this\nequals  undefined  Kind : instance property of  Column  Read only : true  See : Aliases  enumValues   column.enumValues :  Array. string     null  Array of the textual labels for enum values column may contain. If column is not an enum, then this\nequals  undefined  Kind : instance property of  Column  Read only : true  See : Aliases  enumLabels   column.foreignKeyConstraint :  Constraint     null  Foreign key constraint of the column, if column is part of a foreign key constraint, null otherwise.  Kind : instance property of  Column  Read only : true   column.fullName :  string  Full name of the  Column  with (.) notation.  Kind : instance property of  Column  Read only : true  Example     var fullName = column.fullName; // public.account.id   column.fullCatalogName :  string  Full name of the  Column  with (.) notation including catalog name.  Kind : instance property of  Column  Read only : true  Example     var fullName = table.fullName; // crm.public.account.id   column.isAutoIncrement :  boolean  true  if this column has an auto incremented ( nextval() ) default value or defined one of  serial \ntypes.  Kind : instance property of  Column  Read only : true  See : Aliases  isSerial   column.isSerial :  boolean  true  if this column has an auto incremented ( nextval() ) default value or defined one of  serial \ntypes.  Kind : instance property of  Column  Read only : true  See : Aliases  isAutoIncrement   column.isForeignKey :  boolean  true  if this column is a foreign key or part of a foreign key constraint; otherwise  false .\nPlease note that a foreign key may contain more than one column.  Kind : instance property of  Column  Read only : true   column.isPrimaryKey :  boolean  true  if this column is a primary key or part of a primary key constraint; otherwise  false .\nPlease note that a primary key may contain more than one column.  Kind : instance property of  Column  Read only : true   column.length :  number     null  Length of the column.  For data type identified as a character or bit string type, this is the declared\nmaximum length. If column is an array, same rule applies data type of the array.  For character arrays or bit string type arrays, this is the declared maximum length of the array's data type.  For arrays atttypmod records type-specific data supplied at table creation time (for example, the maximum length\nof a varchar column). It is passed to type-specific input functions and length coercion functions.  This value is  undefined  for all other data types or if no maximum length was declared.  Kind : instance property of  Column  Read only : true   column.name :  string  Name of the column.  Kind : instance property of  Column  Read only : true   column.notNull :  boolean  true  if column is  not allowed  to contain null values; otherwise  false .  Kind : instance property of  Column  Read only : true  See :  allowNull   column.parent :  Table  Table  this column belongs to.  Kind : instance property of  Column  Read only : true  See : Aliases  table  Example     var table = column.parent; // Table instance   column.precision :  number     null   If data type identifies a numeric type, this contains the (declared or implicit) precision of\nthe type for this column. The precision indicates the number of significant digits.  If data type identifies a date, time, timestamp, or interval type, this column contains the (declared or implicit)\nfractional seconds precision of the type for this attribute, that is, the number of decimal digits maintained\nfollowing the decimal point in the seconds value.  If data type is an array. Same rules apply for the data type of the array, and this value would become precision\nof the data type of the array.  For all other data types, this is  undefined .   Kind : instance property of  Column  Read only : true   column.referencedColumn :  Column     null  Referenced column by this column. If this isn't foreign key then this is null.  Kind : instance property of  Column  Read only : true   column.scale :  number     null   If data type identifies an exact numeric type, this contains the (declared or implicit) scale\nof the type for this attribute. The scale indicates the number of significant digits to the right of the decimal point.  If data type is an array. Same rule applies for the data type of the array, and this value would become scale\nof the data type of the array.  For all other data types, this is  undefined .   Kind : instance property of  Column  Read only : true   column.schema :  Schema  Schema  this column belongs to.  Kind : instance property of  Column  Read only : true   column.type :  postgreSQLDataType  Data type of the column.  For built-in types this is name of type.   ARRAY , for arrays, and type of array can be found via  arrayType .   USER-DEFINED  for user defined types, and type of it can be found via  userDefinedType .  For domain types this is not domain name, but underlying base type of that domain. Use  domainName  or  domainFullName  Kind : instance property of  Column  Read only : true  See   userDefinedType  domainName  and  domainFullName    column.table :  Table  Table  this column belongs to.  Kind : instance property of  Column  Read only : true  See : Aliases  parent  Example     var table = column.table; // Table instance   column.userDefinedType :  postgreSQLDataType     null  If type of column is user defined such as composite, enumerated, this is the data type of the underlying type.  Kind : instance property of  Column  Read only : true   column.uniqueIndexesNoPK :  Array. Index     null  List of unique  indexes , which column is part of. Results are ordered by index name. Excludes primary key indexes. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates.  Kind : instance property of  Column  Read only : true  See :  uniqueIndexes  for all unique indexes including primary key indexes.   column.uniqueIndexes :  Array. Index     null  List of unique  indexes , which column is part of. Results are ordered by index name. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates.  Kind : instance property of  Column  Read only : true  See :  uniqueIndexesNoPK  for unique indexes excluding primary key indexes.   column.indexes :  Array. Index     null  List of  indexes , which column is part of. Results are ordered by index name.  Kind : instance property of  Column  Read only : true   column.getUniqueIndexesNoPK([callback]) \u21d2  Array. Index     undefined     null  Executes callback for every unique  Index  or returns list of unique  indexes , which column is part of.\nResults are ordered by index name. Excludes primary key indexes. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates.  Kind : instance method of  Column  Returns :  Array. Index     undefined     null  - - Unique  indexes  this column is a part of.  See :  getUniqueIndexes  for all unique indexes including primary key indexes.       Param  Type  Description      [callback]  orderedIndexCallback  Callback to be executed for each unique  Index .      column.getUniqueIndexes([callback]) \u21d2  Array. Index     undefined     null  Executes callback for every unique  Index  or returns list of unique  indexes , which column is part of.\nResults are ordered by index name. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates.  Kind : instance method of  Column  Returns :  Array. Index     undefined     null  - - Unique  indexes  this column is a part of.  See :  getUniqueIndexesNoPK  for all unique indexes excluding primary key indexes.       Param  Type  Description      [callback]  orderedIndexCallback  Callback to be executed for each unique  Index .      column.getIndexes([callback]) \u21d2  Array. Index     undefined     null  Executes callback for every  Index  or returns list of  indexes , which column is part of.\nResults are ordered by index name.  Kind : instance method of  Column  Returns :  Array. Index     undefined     null  - -  indexes  this column is a part of.       Param  Type  Description      [callback]  orderedIndexCallback  Callback to be executed for each  Index .", 
            "title": "Column"
        }, 
        {
            "location": "/api/column/#createindexgetterfilter-function", 
            "text": "Returns a function which returns unique indexes of the column. Based on excludePK results includes Primary Keys or not.  Kind : global function  Returns :  function  - - Getter function.       Param  Type  Description      [filter]  object  Filter object to use in Loki.js query.", 
            "title": "createIndexGetter([filter]) \u21d2 function"
        }, 
        {
            "location": "/api/constraint/", 
            "text": "Constraint\n\n\nClass which represent a constraint. Provides attributes and methods for details of the constraint.\n\n\nNotes for Through Constraints \n\n\nThrough constraints are used for many to many relationships. Actually there isn't such a thing called\n\nmany to many relationship\n or \nthrough constraint\n in the database engine. They are concepts to describe\nrecords which may be related more than one record on both sides. For example an invoice may contain more than product and\na product may related to more than one invoice. Those relationships are solved a so called many to many \njoin table\n.\n\n\nConstraint class supports many to many relationships. Since those constraints are not present in database engine,\nthey are extracted by estimation/interpretation. Many non-join tables in a database could have more than one\nforeign key constraints, and they may not meant to be join tables, but they have still through relationships .\n\n\nBelow is a database schema as an example:\n\n\nsize -------------------\nid (PK)                |  ---------------------------\n line_item \n------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------\n product \n------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)\n\n\n\n\nBelow is the same schema as image:\n\n\n\nProduct table has 3 foreign key constraints. It is obvious that product table is not meant to be a many to many join table.\nHowever product could have been join table for \nsize \n vendor\n, \ncolor \n vendor\n and \nsize \n color\n. As a result size,\ncolor and vendor tables would have many to many \nthrough constraints\n.\n\n\nKind\n: global class  \n\n\n\n\nConstraint\n\n\nnew Constraint(args)\n\n\n.name\n : \nstring\n\n\n.fullName\n : \nstring\n\n\n.fullCatalogName\n : \nstring\n\n\n.type\n : \ncontsraintType\n\n\n.child\n : \nTable\n\n\n.table\n : \nTable\n\n\n.db\n : \nDB\n\n\n.schema\n : \nSchema\n\n\n.onUpdate\n : \nconstraintRule\n \n \nnull\n\n\n.onDelete\n : \nconstraintRule\n \n \nnull\n\n\n.referencedTable\n : \nTable\n \n \nnull\n\n\n.parent\n : \nTable\n \n \nnull\n\n\n.columns\n : \nArray.\nColumn\n \n \nnull\n\n\n.columnsByName\n : \nObject.\nstring, Column\n \n \nnull\n\n\n\n\n\n\nnew Constraint(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nConstraint arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js database object.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nConstraint\n instance.\n\n\n\n\n\n\n\n\n\n\nconstraint.name : \nstring\n\n\nName of the constraint.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.fullName : \nstring\n\n\nFull name of the \nconstraint\n with (.) notation.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = constraint.fullName; // crm.public\n\n\n\n\n\n\nconstraint.fullCatalogName : \nstring\n\n\nFull name of the \nconstraint\n with (.) notation including catalog name.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullCatalogName = constraint.fullCatalogName; // crm.public\n\n\n\n\n\n\nconstraint.type : \ncontsraintType\n\n\nConstraint type. One of \nPRIMARY KEY\n, \nFOREIGN KEY\n or \nCHECK\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.child : \nTable\n\n\nChild \ntable\n of this \nconstraint\n.\n\nNote for foreign key constraints:\n Child table is the table which contains foreign key.\nIn \nexample schema\n product is a child table (vendor_id FK) of vendor table.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar table = constraint.child;\n\n\n\n\n\n\nconstraint.table : \nTable\n\n\nTable\n which this \nconstraint\n belongs to or defined in. \n\n\nNote for foreign key constraints:\n As usual PostgreSQL defines foreign key constraints in child tables,\nwhere foreign key column is defined, so this is child table for foreign key constraints.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar table = constraint.table;\n\n\n\n\n\n\nconstraint.db : \nDB\n\n\nDB\n this \nconstraint\n belongs to.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.schema : \nSchema\n\n\nSchema\n this \nconstraint\n belongs to.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.onUpdate : \nconstraintRule\n \n \nnull\n\n\nUpdate rule for foreign key \nconstraints\n. One of \nCASCADE\n, \nSET NULL\n, \nSET DEFAULT\n, \nRESTRICT\n, \nNO ACTION\n\nIf this is not a foreign key \nconstraint\n this is \nnull\n.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.onDelete : \nconstraintRule\n \n \nnull\n\n\nUpdate rule for foreign key \nconstraints\n. One of \nCASCADE\n, \nSET NULL\n, \nSET DEFAULT\n, \nRESTRICT\n, \nNO ACTION\n\nIf this is not a foreign key \nconstraint\n this is \nnull\n.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.referencedTable : \nTable\n \n \nnull\n\n\nFor foreign key \nconstraints\n this is \nTable\n instance this \nconstraint\n refers to.\nIf this is not a foreign key \nconstraint\n this is \nnull\n.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nparent\n\n\n\n\nconstraint.parent : \nTable\n \n \nnull\n\n\nFor foreign key \nconstraints\n this is \nTable\n instance this \nconstraint\n refers to.\nIf this is not a foreign key \nconstraint\n this is \nnull\n. \n\n\nPlease Note:\n This is not the \nTable\n this constraint belongs to or defined in. Parent applies only to\nforeign key constraints and for foreign key constraints parent means referenced table not the table it is defined in.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nAliases \nreferencedTable\n\n\nTo get \nTable\n this constraint belongs to or defined in, use \ntable\n.\n\n\n\n\n\n\nconstraint.columns : \nArray.\nColumn\n \n \nnull\n\n\nList of \ncolumns\n restricted by \nconstraint\n, in order their ordinal position\nwithin the constraint key. If \nconstraint\n does not have any \ncolumns\n this is \nnull\n.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true\n\n\n\n\nconstraint.columnsByName : \nObject.\nstring, Column\n \n \nnull\n\n\nList of columns restricted by \nconstraint\n, in order their ordinal position within the constraint key.\nIf \nconstraint\n does not have any columns this is \nnull\n.\n\n\nKind\n: instance property of \nConstraint\n\n\nRead only\n: true", 
            "title": "Constraint"
        }, 
        {
            "location": "/api/constraint/#constraint", 
            "text": "Class which represent a constraint. Provides attributes and methods for details of the constraint.  Notes for Through Constraints   Through constraints are used for many to many relationships. Actually there isn't such a thing called many to many relationship  or  through constraint  in the database engine. They are concepts to describe\nrecords which may be related more than one record on both sides. For example an invoice may contain more than product and\na product may related to more than one invoice. Those relationships are solved a so called many to many  join table .  Constraint class supports many to many relationships. Since those constraints are not present in database engine,\nthey are extracted by estimation/interpretation. Many non-join tables in a database could have more than one\nforeign key constraints, and they may not meant to be join tables, but they have still through relationships .  Below is a database schema as an example:  size -------------------\nid (PK)                |  ---------------------------  line_item  ------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------  product  ------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)  Below is the same schema as image:  Product table has 3 foreign key constraints. It is obvious that product table is not meant to be a many to many join table.\nHowever product could have been join table for  size   vendor ,  color   vendor  and  size   color . As a result size,\ncolor and vendor tables would have many to many  through constraints .  Kind : global class     Constraint  new Constraint(args)  .name  :  string  .fullName  :  string  .fullCatalogName  :  string  .type  :  contsraintType  .child  :  Table  .table  :  Table  .db  :  DB  .schema  :  Schema  .onUpdate  :  constraintRule     null  .onDelete  :  constraintRule     null  .referencedTable  :  Table     null  .parent  :  Table     null  .columns  :  Array. Column     null  .columnsByName  :  Object. string, Column     null    new Constraint(args)     Param  Type  Description      args  Object  Constraint arguments.    args.registry  Loki  Loki.js database object.    args.attributes  Object  Attributes of the  Constraint  instance.      constraint.name :  string  Name of the constraint.  Kind : instance property of  Constraint  Read only : true   constraint.fullName :  string  Full name of the  constraint  with (.) notation.  Kind : instance property of  Constraint  Read only : true  Example     var fullName = constraint.fullName; // crm.public   constraint.fullCatalogName :  string  Full name of the  constraint  with (.) notation including catalog name.  Kind : instance property of  Constraint  Read only : true  Example     var fullCatalogName = constraint.fullCatalogName; // crm.public   constraint.type :  contsraintType  Constraint type. One of  PRIMARY KEY ,  FOREIGN KEY  or  CHECK  Kind : instance property of  Constraint  Read only : true   constraint.child :  Table  Child  table  of this  constraint . Note for foreign key constraints:  Child table is the table which contains foreign key.\nIn  example schema  product is a child table (vendor_id FK) of vendor table.  Kind : instance property of  Constraint  Read only : true  Example     var table = constraint.child;   constraint.table :  Table  Table  which this  constraint  belongs to or defined in.   Note for foreign key constraints:  As usual PostgreSQL defines foreign key constraints in child tables,\nwhere foreign key column is defined, so this is child table for foreign key constraints.  Kind : instance property of  Constraint  Read only : true  Example     var table = constraint.table;   constraint.db :  DB  DB  this  constraint  belongs to.  Kind : instance property of  Constraint  Read only : true   constraint.schema :  Schema  Schema  this  constraint  belongs to.  Kind : instance property of  Constraint  Read only : true   constraint.onUpdate :  constraintRule     null  Update rule for foreign key  constraints . One of  CASCADE ,  SET NULL ,  SET DEFAULT ,  RESTRICT ,  NO ACTION \nIf this is not a foreign key  constraint  this is  null .  Kind : instance property of  Constraint  Read only : true   constraint.onDelete :  constraintRule     null  Update rule for foreign key  constraints . One of  CASCADE ,  SET NULL ,  SET DEFAULT ,  RESTRICT ,  NO ACTION \nIf this is not a foreign key  constraint  this is  null .  Kind : instance property of  Constraint  Read only : true   constraint.referencedTable :  Table     null  For foreign key  constraints  this is  Table  instance this  constraint  refers to.\nIf this is not a foreign key  constraint  this is  null .  Kind : instance property of  Constraint  Read only : true  See : Aliases  parent   constraint.parent :  Table     null  For foreign key  constraints  this is  Table  instance this  constraint  refers to.\nIf this is not a foreign key  constraint  this is  null .   Please Note:  This is not the  Table  this constraint belongs to or defined in. Parent applies only to\nforeign key constraints and for foreign key constraints parent means referenced table not the table it is defined in.  Kind : instance property of  Constraint  Read only : true  See   Aliases  referencedTable  To get  Table  this constraint belongs to or defined in, use  table .    constraint.columns :  Array. Column     null  List of  columns  restricted by  constraint , in order their ordinal position\nwithin the constraint key. If  constraint  does not have any  columns  this is  null .  Kind : instance property of  Constraint  Read only : true   constraint.columnsByName :  Object. string, Column     null  List of columns restricted by  constraint , in order their ordinal position within the constraint key.\nIf  constraint  does not have any columns this is  null .  Kind : instance property of  Constraint  Read only : true", 
            "title": "Constraint"
        }, 
        {
            "location": "/api/db/", 
            "text": "DB\n\n\nClass which represent a database. Provides attributes and methods for details of the database.\n\n\nKind\n: global class  \n\n\n\n\nDB\n\n\nnew DB(args)\n\n\n.name\n : \nstring\n\n\n.fullName\n : \nstring\n\n\n.fullCatalogName\n : \nstring\n\n\n.schemas\n : \nArray.\nSchema\n \n \nnull\n\n\n.schemasByName\n : \nObject.\nstring, Schema\n \n \nnull\n\n\n.getSchema(key)\n \u21d2 \nSchema\n \n \nundefined\n\n\n.schemaExists(name)\n \u21d2 \nboolean\n\n\n.get(path)\n \u21d2 \nSchema\n \n \nTable\n \n \nColumn\n \n \nundefined\n\n\n.getSchemas([callback])\n \u21d2 \nArray.\nSchema\n \n \nundefined\n \n \nnull\n\n\n\n\n\n\nnew DB(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nDatabase arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js database object.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nDB\n instance.\n\n\n\n\n\n\n\n\n\n\ndB.name : \nstring\n\n\nName of the \nDatabase\n.\n\n\nKind\n: instance property of \nDB\n\n\nRead only\n: true\n\n\n\n\ndB.fullName : \nstring\n\n\nFull name of the \nDatabase\n with (.) notation. Since database does not have a parent this equals database name.\n\n\nKind\n: instance property of \nDB\n\n\nRead only\n: true\n\n\n\n\ndB.fullCatalogName : \nstring\n\n\nFull name of the \nDatabase\n with (.) notation including catalog name. Since database does not have a parent this equals database name.\n\n\nKind\n: instance property of \nDB\n\n\nRead only\n: true\n\n\n\n\ndB.schemas : \nArray.\nSchema\n \n \nnull\n\n\nAll \nSchema\n instances in the database as an array. They are ordered by schema name.\n\n\nKind\n: instance property of \nDB\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar schemas = db.schemas;\nvar name    = schemas[0].name;\n\n\n\n\n\n\ndB.schemasByName : \nObject.\nstring, Schema\n \n \nnull\n\n\nAll \nSchema\n instances in the database as a simple object. Keys are schema names, values are \nSchema\n instances.\n\n\nKind\n: instance property of \nDB\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar schemas = db.schemasByName;\nvar public  = schemas.public;\n\n\n\n\n\n\ndB.getSchema(key) \u21d2 \nSchema\n \n \nundefined\n\n\nReturns \nSchema\n instance with given name or order.\n\n\nKind\n: instance method of \nDB\n\n\nReturns\n: \nSchema\n \n \nundefined\n - - Requested \nSchema\n instance.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n \n \nnumber\n\n\nName or order number of the schema.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar schema = db.getSchema('public');\n\n\n\n\n\n\ndB.schemaExists(name) \u21d2 \nboolean\n\n\nReturns true if \nSchema\n instance with given name or order number exists.\n\n\nKind\n: instance method of \nDB\n\n\nReturns\n: \nboolean\n - - \ntrue\n if schema exists in database, otherwise \nfalse\n.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n \n \nnumber\n\n\nName or order number of the schema.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar publicExists = db.schemaExists('public'); // true\nvar otherExists  = db.schemaExists('other');  // false\n\n\n\n\n\n\ndB.get(path) \u21d2 \nSchema\n \n \nTable\n \n \nColumn\n \n \nundefined\n\n\nReturns \nSchema\n, \nTable\n or \nColumn\n on given path relative to \nDB\n. Path should be in dot (.) notation.\n\n\nKind\n: instance method of \nDB\n\n\nReturns\n: \nSchema\n \n \nTable\n \n \nColumn\n \n \nundefined\n - - Requested item.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath of the requested item in dot (.) notation such as 'public.contact'\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar schema = db.get('public'),              // Returns public schema.\n    table  = db.get('public.contact'),      // Returns contact table in public schema.\n    column = db.get('public.contact.name'); // Returns name column of the contact table in public schema.\n\n\n\n\n\n\ndB.getSchemas([callback]) \u21d2 \nArray.\nSchema\n \n \nundefined\n \n \nnull\n\n\nRetrieves all schemas in the database and executes given callback (sync), if provided. Callback has a signature of\n(\nSchema\n, index, collection). If no callback is provided, returns an array of all \nschemas\n.\n\n\nKind\n: instance method of \nDB\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedSchemaCallback\n\n\nCallback to be executed for each schema.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ndb.getSchemas(function(schema, i, collection) {\n    var name = schema.name;\n    var ord  = i;\n);", 
            "title": "DB"
        }, 
        {
            "location": "/api/db/#db", 
            "text": "Class which represent a database. Provides attributes and methods for details of the database.  Kind : global class     DB  new DB(args)  .name  :  string  .fullName  :  string  .fullCatalogName  :  string  .schemas  :  Array. Schema     null  .schemasByName  :  Object. string, Schema     null  .getSchema(key)  \u21d2  Schema     undefined  .schemaExists(name)  \u21d2  boolean  .get(path)  \u21d2  Schema     Table     Column     undefined  .getSchemas([callback])  \u21d2  Array. Schema     undefined     null    new DB(args)     Param  Type  Description      args  Object  Database arguments.    args.registry  Loki  Loki.js database object.    args.attributes  Object  Attributes of the  DB  instance.      dB.name :  string  Name of the  Database .  Kind : instance property of  DB  Read only : true   dB.fullName :  string  Full name of the  Database  with (.) notation. Since database does not have a parent this equals database name.  Kind : instance property of  DB  Read only : true   dB.fullCatalogName :  string  Full name of the  Database  with (.) notation including catalog name. Since database does not have a parent this equals database name.  Kind : instance property of  DB  Read only : true   dB.schemas :  Array. Schema     null  All  Schema  instances in the database as an array. They are ordered by schema name.  Kind : instance property of  DB  Read only : true  Example     var schemas = db.schemas;\nvar name    = schemas[0].name;   dB.schemasByName :  Object. string, Schema     null  All  Schema  instances in the database as a simple object. Keys are schema names, values are  Schema  instances.  Kind : instance property of  DB  Read only : true  Example     var schemas = db.schemasByName;\nvar public  = schemas.public;   dB.getSchema(key) \u21d2  Schema     undefined  Returns  Schema  instance with given name or order.  Kind : instance method of  DB  Returns :  Schema     undefined  - - Requested  Schema  instance.       Param  Type  Description      key  string     number  Name or order number of the schema.     Example     var schema = db.getSchema('public');   dB.schemaExists(name) \u21d2  boolean  Returns true if  Schema  instance with given name or order number exists.  Kind : instance method of  DB  Returns :  boolean  - -  true  if schema exists in database, otherwise  false .       Param  Type  Description      name  string     number  Name or order number of the schema.     Example     var publicExists = db.schemaExists('public'); // true\nvar otherExists  = db.schemaExists('other');  // false   dB.get(path) \u21d2  Schema     Table     Column     undefined  Returns  Schema ,  Table  or  Column  on given path relative to  DB . Path should be in dot (.) notation.  Kind : instance method of  DB  Returns :  Schema     Table     Column     undefined  - - Requested item.       Param  Type  Description      path  string  Path of the requested item in dot (.) notation such as 'public.contact'     Example     var schema = db.get('public'),              // Returns public schema.\n    table  = db.get('public.contact'),      // Returns contact table in public schema.\n    column = db.get('public.contact.name'); // Returns name column of the contact table in public schema.   dB.getSchemas([callback]) \u21d2  Array. Schema     undefined     null  Retrieves all schemas in the database and executes given callback (sync), if provided. Callback has a signature of\n( Schema , index, collection). If no callback is provided, returns an array of all  schemas .  Kind : instance method of  DB        Param  Type  Description      [callback]  orderedSchemaCallback  Callback to be executed for each schema.     Example     db.getSchemas(function(schema, i, collection) {\n    var name = schema.name;\n    var ord  = i;\n);", 
            "title": "DB"
        }, 
        {
            "location": "/api/", 
            "text": "pgStructrue\n\n\n\n\npgStructrue~getDB(pgOptions, [schemas]) \u21d2 \nPromise.\nT\n\n\nKind\n: inner method of \npgStructrue\n\n\nReturns\n: \nPromise.\nT\n - - Promise with signature (\nDB\n).  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npgOptions\n\n\nObject\n \n \npg.client\n\n\n\n\nPg client or Connection parameters to connect to database.\n\n\n\n\n\n\npgOptions.database\n\n\nstring\n\n\n\n\nDatabase name\n\n\n\n\n\n\n[pgOptions.host]\n\n\nstring\n\n\nlocalhost\n\n\nHostname of the database.\n\n\n\n\n\n\n[pgOptions.port]\n\n\nnumber\n\n\n5432\n\n\nPort of the database.\n\n\n\n\n\n\n[pgOptions.user]\n\n\nstring\n\n\n\n\nUsername for connecting to db.\n\n\n\n\n\n\n[pgOptions.password]\n\n\nstring\n\n\n\n\nPassword to connecting to db.\n\n\n\n\n\n\n[schemas]\n\n\nArray.\nstring\n\n\n[public]\n\n\nPostgreSQL schemas to be parsed.", 
            "title": "PG Structrue"
        }, 
        {
            "location": "/api/#pgstructrue", 
            "text": "pgStructrue~getDB(pgOptions, [schemas]) \u21d2  Promise. T  Kind : inner method of  pgStructrue  Returns :  Promise. T  - - Promise with signature ( DB ).       Param  Type  Default  Description      pgOptions  Object     pg.client   Pg client or Connection parameters to connect to database.    pgOptions.database  string   Database name    [pgOptions.host]  string  localhost  Hostname of the database.    [pgOptions.port]  number  5432  Port of the database.    [pgOptions.user]  string   Username for connecting to db.    [pgOptions.password]  string   Password to connecting to db.    [schemas]  Array. string  [public]  PostgreSQL schemas to be parsed.", 
            "title": "pgStructrue"
        }, 
        {
            "location": "/api/m2m-relation/", 
            "text": "M2MRelation \u21d0 \nRelation\n\n\nKind\n: global class\n\n\nExtends:\n \nRelation\n  \n\n\n\n\nM2MRelation\n \u21d0 \nRelation\n\n\nnew M2MRelation()\n\n\n.type\n : \nrelationType\n\n\n.sourceTable\n : \nTable\n\n\n.joinTable\n : \nTable\n\n\n.targetTable\n : \nTable\n\n\n.sourceConstraint\n : \nTable\n\n\n.targetConstraint\n : \nTable\n\n\n\n\n\n\nnew M2MRelation()\n\n\nClass which represent a many to many relationship which resembles \nbelongsToMany\n or \nhasManyThrough\n relations in ORMs (Object Relational Mappers).\nProvides attributes and methods for details of the relationship.\n\n\nActually there isn't such a thing called \nmany to many relationship\n or \nthrough constraint\n in the database engine.\nThey are concepts to describe records which may be related more than one record on both sides.\nFor example an invoice may contain more than product and a product may related to more than one invoice.\nThose relationships are solved a so called many to many \njoin table\n.\n\n\nSince those relations are not present in database engine, they are extracted by estimation/interpretation.\nMany non-join tables in a database could have more than one foreign key constraints,\nand they may not meant to be join tables, but they still appear to have through relationships.\n\n\nBelow is a database schema as an example:\n\n\nsize -------------------\nid (PK)                |  ---------------------------\n line_item \n------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------\n product \n------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)\n\n\n\n\n\nBelow is the same schema as image:\n\n\n\nSome definitions used in descriptions for \nM2MRelation\n.\n\n \n Source Table: \n Table which this relationship belongs to.\n\n \n Join Table: \n Table that contains common fields from two or more other tables.\n* \n Target Table: \n Table that is related to base table through a join table.\n\n\nProduct table has 3 foreign key constraints. Product table is not meant to be a many to many join table.\nHowever product could have been join table for \nsize \n vendor\n, \ncolor \n vendor\n and \nsize \n color\n. As a result size,\ncolor and vendor tables would have many to many relationships.\n\n\nExample\n  \n\n\n// Example tables have single primary key and and examples first relation. So zero index ([0]) is used. Use all array elements if necessary.\n// product ----\n line_item \n---- cart\n// (source)        (join)       (target)\n\nlet relation             = product.m2mRelations[0];              // RELATION:    product ---\n line_item \n--- cart\nlet sourceConstraint     = relation.sourceConstraint;            // CONSTRAINT:           ^-- product_has_carts\nlet targetConstraint     = relation.targetConstraint;            // CONSTRAINT:       cart_has_products --^\nlet sourceTable          = relation.sourceTable;                 // TABLE:       product\nlet targetTable          = relation.targetTable;                 // TABLE:       cart\nlet sourceJoinFKColumn   = relation.sourceConstraint.columns[0]; // COLUMN:      product_id  (from line_item table)\nlet targetJoinFKColumn   = relation.targetConstraint.columns[0]; // COLUMN:      cart_id     (from line_item table)\nlet sourcePKColumn       = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)\nlet targetPKColumn       = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from cart table)\n\n\n\n\n\n\nm2MRelation.type : \nrelationType\n\n\nType of relation. One of \nONE TO MANY\n or \nMANY TO MANY\n.\n\n\nKind\n: instance property of \nM2MRelation\n\n\nRead only\n: true\n\n\n\n\nm2MRelation.sourceTable : \nTable\n\n\nTable\n which this relation belongs to.\n\n\nKind\n: instance property of \nM2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation = product.M2MRelationRelations[0];  // RELATION:    product ---\n line_item \n--- cart\nlet source   = relation.sourceTable;             // TABLE:       product\n\n\n\n\n\n\nm2MRelation.joinTable : \nTable\n\n\nTable\n of this relationship. This table contains foreign key columns referring both\n\nsourceTable\n and \ntargetTable\n.\n\n\nKind\n: instance property of \nM2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation  = product.M2MRelationRelations[0]; // RELATION:    product ---\n line_item \n--- cart\nlet joinTable = relation.joinTable;              // TABLE:       line_item\n\n\n\n\n\n\nm2MRelation.targetTable : \nTable\n\n\nTable\n which this relation is referring to (Through a join table).\n\n\nKind\n: instance property of \nM2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation = product.M2MRelationRelations[0];  // RELATION:    product ---\n line_item \n--- cart\nlet target   = relation.targetTable;             // TABLE:       cart\n\n\n\n\n\n\nm2MRelation.sourceConstraint : \nTable\n\n\nForeign key \nconstraint\n between \nsource table\n and \njoin table\n.\n\n\nKind\n: instance property of \nM2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation             = product.M2MRelationRelations[0];      // RELATION:    product ---\n line_item \n--- cart\nlet sourceConstraint     = relation.sourceConstraint;            // CONSTRAINT:           ^-- product_has_carts\nlet sourceJoinFKColumn   = relation.sourceConstraint.columns[0]; // COLUMN:      product_id (from line_item table)\n\n\n\n\n\n\nm2MRelation.targetConstraint : \nTable\n\n\nForeign key \nconstraint\n between \njoin table\n and \ntarget table\n.\n\n\nKind\n: instance property of \nM2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation             = product.M2MRelationRelations[0];      // RELATION:    product ---\n line_item \n--- cart\nlet targetConstraint     = relation.targetConstraint;            // CONSTRAINT:       cart_has_products --^\nlet targetJoinFKColumn   = relation.targetConstraint.columns[0]; // COLUMN:      cart_id (from line_item table)", 
            "title": "M2M Relation"
        }, 
        {
            "location": "/api/m2m-relation/#m2mrelation-relation", 
            "text": "Kind : global class  Extends:   Relation      M2MRelation  \u21d0  Relation  new M2MRelation()  .type  :  relationType  .sourceTable  :  Table  .joinTable  :  Table  .targetTable  :  Table  .sourceConstraint  :  Table  .targetConstraint  :  Table    new M2MRelation()  Class which represent a many to many relationship which resembles  belongsToMany  or  hasManyThrough  relations in ORMs (Object Relational Mappers).\nProvides attributes and methods for details of the relationship.  Actually there isn't such a thing called  many to many relationship  or  through constraint  in the database engine.\nThey are concepts to describe records which may be related more than one record on both sides.\nFor example an invoice may contain more than product and a product may related to more than one invoice.\nThose relationships are solved a so called many to many  join table .  Since those relations are not present in database engine, they are extracted by estimation/interpretation.\nMany non-join tables in a database could have more than one foreign key constraints,\nand they may not meant to be join tables, but they still appear to have through relationships.  Below is a database schema as an example:  size -------------------\nid (PK)                |  ---------------------------  line_item  ------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------  product  ------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)  Below is the same schema as image:  Some definitions used in descriptions for  M2MRelation .    Source Table:   Table which this relationship belongs to.    Join Table:   Table that contains common fields from two or more other tables.\n*   Target Table:   Table that is related to base table through a join table. \nProduct table has 3 foreign key constraints. Product table is not meant to be a many to many join table.\nHowever product could have been join table for  size   vendor ,  color   vendor  and  size   color . As a result size,\ncolor and vendor tables would have many to many relationships.  Example     // Example tables have single primary key and and examples first relation. So zero index ([0]) is used. Use all array elements if necessary.\n// product ----  line_item  ---- cart\n// (source)        (join)       (target)\n\nlet relation             = product.m2mRelations[0];              // RELATION:    product ---  line_item  --- cart\nlet sourceConstraint     = relation.sourceConstraint;            // CONSTRAINT:           ^-- product_has_carts\nlet targetConstraint     = relation.targetConstraint;            // CONSTRAINT:       cart_has_products --^\nlet sourceTable          = relation.sourceTable;                 // TABLE:       product\nlet targetTable          = relation.targetTable;                 // TABLE:       cart\nlet sourceJoinFKColumn   = relation.sourceConstraint.columns[0]; // COLUMN:      product_id  (from line_item table)\nlet targetJoinFKColumn   = relation.targetConstraint.columns[0]; // COLUMN:      cart_id     (from line_item table)\nlet sourcePKColumn       = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)\nlet targetPKColumn       = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from cart table)   m2MRelation.type :  relationType  Type of relation. One of  ONE TO MANY  or  MANY TO MANY .  Kind : instance property of  M2MRelation  Read only : true   m2MRelation.sourceTable :  Table  Table  which this relation belongs to.  Kind : instance property of  M2MRelation  Read only : true  Example     let relation = product.M2MRelationRelations[0];  // RELATION:    product ---  line_item  --- cart\nlet source   = relation.sourceTable;             // TABLE:       product   m2MRelation.joinTable :  Table  Table  of this relationship. This table contains foreign key columns referring both sourceTable  and  targetTable .  Kind : instance property of  M2MRelation  Read only : true  Example     let relation  = product.M2MRelationRelations[0]; // RELATION:    product ---  line_item  --- cart\nlet joinTable = relation.joinTable;              // TABLE:       line_item   m2MRelation.targetTable :  Table  Table  which this relation is referring to (Through a join table).  Kind : instance property of  M2MRelation  Read only : true  Example     let relation = product.M2MRelationRelations[0];  // RELATION:    product ---  line_item  --- cart\nlet target   = relation.targetTable;             // TABLE:       cart   m2MRelation.sourceConstraint :  Table  Foreign key  constraint  between  source table  and  join table .  Kind : instance property of  M2MRelation  Read only : true  Example     let relation             = product.M2MRelationRelations[0];      // RELATION:    product ---  line_item  --- cart\nlet sourceConstraint     = relation.sourceConstraint;            // CONSTRAINT:           ^-- product_has_carts\nlet sourceJoinFKColumn   = relation.sourceConstraint.columns[0]; // COLUMN:      product_id (from line_item table)   m2MRelation.targetConstraint :  Table  Foreign key  constraint  between  join table  and  target table .  Kind : instance property of  M2MRelation  Read only : true  Example     let relation             = product.M2MRelationRelations[0];      // RELATION:    product ---  line_item  --- cart\nlet targetConstraint     = relation.targetConstraint;            // CONSTRAINT:       cart_has_products --^\nlet targetJoinFKColumn   = relation.targetConstraint.columns[0]; // COLUMN:      cart_id (from line_item table)", 
            "title": "M2MRelation \u21d0 Relation"
        }, 
        {
            "location": "/api/m2o-relation/", 
            "text": "M2ORelation \u21d0 \nRelation\n\n\nKind\n: global class\n\n\nExtends:\n \nRelation\n  \n\n\n\n\nM2ORelation\n \u21d0 \nRelation\n\n\nnew M2ORelation()\n\n\n.type\n : \nrelationType\n\n\n.sourceTable\n : \nTable\n\n\n.targetTable\n : \nTable\n\n\n.constraint\n : \nTable\n\n\n\n\n\n\nnew M2ORelation()\n\n\nClass which represent many to one relationship which resembles \nbelongsTo\n relation in ORMs (Object Relational Mappers).\nProvides attributes and methods for details of the relationship.\n\n\nActually there is no many to one relation in database engine. It is basically one to many relation in reverse direction.\n\n\nBelow is a database schema as an example:\n\n\nsize -------------------\nid (PK)                |  ---------------------------\n line_item \n------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------\n product \n------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)\n\n\n\n\n\nBelow is the same schema as image:\n\n\n\nSome definitions used in descriptions for \nM2ORelation\n.\n\n \n Source Table: \n Table which this relationship belongs to.\n\n \n Target Table: \n Table that is related to base table.\n\n\nExample\n  \n\n\n// Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary.\n// line_item \n---- product\n// (source)        (target)\n\nlet relation     = line_item.m2oRelations[0];            // RELATION:    line_item \n---- product\nlet constraint   = relation.constraint;                  // CONSTRAINT:               ^-- product_has_carts\nlet sourceTable  = relation.sourceTable;                 // TABLE:       line_item\nlet targetTable  = relation.targetTable;                 // TABLE:       product\nlet FKColumn     = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nlet PKColumn     = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from product table)\n\n\n\n\n\n\nm2ORelation.type : \nrelationType\n\n\nType of relation. One of \nONE TO MANY\n or \nMANY TO MANY\n.\n\n\nKind\n: instance property of \nM2ORelation\n\n\nRead only\n: true\n\n\n\n\nm2ORelation.sourceTable : \nTable\n\n\nTable\n which this relation belongs to.\n\n\nKind\n: instance property of \nM2ORelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation     = product.M2ORelationRelations[0];  // RELATION:    line_item \n---- product\nlet sourceTable  = relation.sourceTable;             // TABLE:       line_item\n\n\n\n\n\n\nm2ORelation.targetTable : \nTable\n\n\nTable\n which this relation is referred by.\n\n\nKind\n: instance property of \nM2ORelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation     = product.M2ORelationRelations[0];  // RELATION:    line_item \n---- product\nlet targetTable  = relation.targetTable;             // TABLE:       product\n\n\n\n\n\n\nm2ORelation.constraint : \nTable\n\n\nForeign key \nconstraint\n between \nsource table\n and \ntarget table\n.\n\n\nKind\n: instance property of \nM2ORelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation     = product.M2ORelationRelations[0];  // RELATION:    line_item \n---- product\nlet constraint   = relation.constraint;              // CONSTRAINT:               ^-- product_has_carts\nlet FKColumn     = relation.constraint.columns[0];   // COLUMN:      product_id (from line_item table)", 
            "title": "M2O Relation"
        }, 
        {
            "location": "/api/m2o-relation/#m2orelation-relation", 
            "text": "Kind : global class  Extends:   Relation      M2ORelation  \u21d0  Relation  new M2ORelation()  .type  :  relationType  .sourceTable  :  Table  .targetTable  :  Table  .constraint  :  Table    new M2ORelation()  Class which represent many to one relationship which resembles  belongsTo  relation in ORMs (Object Relational Mappers).\nProvides attributes and methods for details of the relationship.  Actually there is no many to one relation in database engine. It is basically one to many relation in reverse direction.  Below is a database schema as an example:  size -------------------\nid (PK)                |  ---------------------------  line_item  ------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------  product  ------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)  Below is the same schema as image:  Some definitions used in descriptions for  M2ORelation .    Source Table:   Table which this relationship belongs to.    Target Table:   Table that is related to base table.  Example     // Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary.\n// line_item  ---- product\n// (source)        (target)\n\nlet relation     = line_item.m2oRelations[0];            // RELATION:    line_item  ---- product\nlet constraint   = relation.constraint;                  // CONSTRAINT:               ^-- product_has_carts\nlet sourceTable  = relation.sourceTable;                 // TABLE:       line_item\nlet targetTable  = relation.targetTable;                 // TABLE:       product\nlet FKColumn     = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nlet PKColumn     = relation.targetTable.primaryKeys[0];  // COLUMN:      id          (from product table)   m2ORelation.type :  relationType  Type of relation. One of  ONE TO MANY  or  MANY TO MANY .  Kind : instance property of  M2ORelation  Read only : true   m2ORelation.sourceTable :  Table  Table  which this relation belongs to.  Kind : instance property of  M2ORelation  Read only : true  Example     let relation     = product.M2ORelationRelations[0];  // RELATION:    line_item  ---- product\nlet sourceTable  = relation.sourceTable;             // TABLE:       line_item   m2ORelation.targetTable :  Table  Table  which this relation is referred by.  Kind : instance property of  M2ORelation  Read only : true  Example     let relation     = product.M2ORelationRelations[0];  // RELATION:    line_item  ---- product\nlet targetTable  = relation.targetTable;             // TABLE:       product   m2ORelation.constraint :  Table  Foreign key  constraint  between  source table  and  target table .  Kind : instance property of  M2ORelation  Read only : true  Example     let relation     = product.M2ORelationRelations[0];  // RELATION:    line_item  ---- product\nlet constraint   = relation.constraint;              // CONSTRAINT:               ^-- product_has_carts\nlet FKColumn     = relation.constraint.columns[0];   // COLUMN:      product_id (from line_item table)", 
            "title": "M2ORelation \u21d0 Relation"
        }, 
        {
            "location": "/api/o2m-relation/", 
            "text": "O2MRelation \u21d0 \nRelation\n\n\nKind\n: global class\n\n\nExtends:\n \nRelation\n  \n\n\n\n\nO2MRelation\n \u21d0 \nRelation\n\n\nnew O2MRelation()\n\n\n.type\n : \nrelationType\n\n\n.sourceTable\n : \nTable\n\n\n.targetTable\n : \nTable\n\n\n.constraint\n : \nTable\n\n\n\n\n\n\nnew O2MRelation()\n\n\nClass which represent many to one relationship which resembles \nhasMany\n relation in ORMs (Object Relational Mappers).\nProvides attributes and methods for details of the relationship.\n\n\nBelow is a database schema as an example:\n\n\nsize -------------------\nid (PK)                |  ---------------------------\n line_item \n------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------\n product \n------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)\n\n\n\n\n\nBelow is the same schema as image:\n\n\n\nSome definitions used in descriptions for \nO2MRelation\n.\n\n \n Source Table: \n Table which this relationship belongs to.\n\n \n Target Table: \n Table that is related to base table.\n\n\nExample\n  \n\n\n// Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary.\n// product ----\n line_item\n// (source)       (target)\n\nlet relation         = product.o2mRelations[0];              // RELATION:    product ---\n line_item\nlet constraint       = relation.constraint;                  // CONSTRAINT:           ^-- product_has_carts\nlet sourceTable      = relation.sourceTable;                 // TABLE:       product\nlet targetTable      = relation.targetTable;                 // TABLE:       line_item\nlet FKColumn         = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nlet sourcePKColumn   = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)\n\n\n\n\n\n\no2MRelation.type : \nrelationType\n\n\nType of relation. One of \nONE TO MANY\n or \nMANY TO MANY\n.\n\n\nKind\n: instance property of \nO2MRelation\n\n\nRead only\n: true\n\n\n\n\no2MRelation.sourceTable : \nTable\n\n\nTable\n which this relation belongs to.\n\n\nKind\n: instance property of \nO2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation     = product.O2MRelationRelations[0];  // RELATION:    product ---\n line_item\nlet sourceTable  = relation.sourceTable;             // TABLE:       product\n\n\n\n\n\n\no2MRelation.targetTable : \nTable\n\n\nTable\n which this relation is referring to.\n\n\nKind\n: instance property of \nO2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation     = product.O2MRelationRelations[0];  // RELATION:    product ---\n line_item\nlet targetTable  = relation.targetTable;             // TABLE:       line_item\n\n\n\n\n\n\no2MRelation.constraint : \nTable\n\n\nForeign key \nconstraint\n between \nsource table\n and \ntarget table\n.\n\n\nKind\n: instance property of \nO2MRelation\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet relation     = product.O2MRelationRelations[0];  // RELATION:    product ---\n line_item\nlet constraint   = relation.constraint;              // CONSTRAINT:           ^-- product_has_carts\nlet FKColumn     = relation.constraint.columns[0];   // COLUMN:      product_id (from line_item table)", 
            "title": "O2M Relation"
        }, 
        {
            "location": "/api/o2m-relation/#o2mrelation-relation", 
            "text": "Kind : global class  Extends:   Relation      O2MRelation  \u21d0  Relation  new O2MRelation()  .type  :  relationType  .sourceTable  :  Table  .targetTable  :  Table  .constraint  :  Table    new O2MRelation()  Class which represent many to one relationship which resembles  hasMany  relation in ORMs (Object Relational Mappers).\nProvides attributes and methods for details of the relationship.  Below is a database schema as an example:  size -------------------\nid (PK)                |  ---------------------------  line_item  ------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------  product  ------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)  Below is the same schema as image:  Some definitions used in descriptions for  O2MRelation .    Source Table:   Table which this relationship belongs to.    Target Table:   Table that is related to base table.  Example     // Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary.\n// product ----  line_item\n// (source)       (target)\n\nlet relation         = product.o2mRelations[0];              // RELATION:    product ---  line_item\nlet constraint       = relation.constraint;                  // CONSTRAINT:           ^-- product_has_carts\nlet sourceTable      = relation.sourceTable;                 // TABLE:       product\nlet targetTable      = relation.targetTable;                 // TABLE:       line_item\nlet FKColumn         = relation.constraint.columns[0];       // COLUMN:      product_id  (from line_item table)\nlet sourcePKColumn   = relation.sourceTable.primaryKeys[0];  // COLUMN:      id          (from product table)   o2MRelation.type :  relationType  Type of relation. One of  ONE TO MANY  or  MANY TO MANY .  Kind : instance property of  O2MRelation  Read only : true   o2MRelation.sourceTable :  Table  Table  which this relation belongs to.  Kind : instance property of  O2MRelation  Read only : true  Example     let relation     = product.O2MRelationRelations[0];  // RELATION:    product ---  line_item\nlet sourceTable  = relation.sourceTable;             // TABLE:       product   o2MRelation.targetTable :  Table  Table  which this relation is referring to.  Kind : instance property of  O2MRelation  Read only : true  Example     let relation     = product.O2MRelationRelations[0];  // RELATION:    product ---  line_item\nlet targetTable  = relation.targetTable;             // TABLE:       line_item   o2MRelation.constraint :  Table  Foreign key  constraint  between  source table  and  target table .  Kind : instance property of  O2MRelation  Read only : true  Example     let relation     = product.O2MRelationRelations[0];  // RELATION:    product ---  line_item\nlet constraint   = relation.constraint;              // CONSTRAINT:           ^-- product_has_carts\nlet FKColumn     = relation.constraint.columns[0];   // COLUMN:      product_id (from line_item table)", 
            "title": "O2MRelation \u21d0 Relation"
        }, 
        {
            "location": "/api/pg-index/", 
            "text": "Index\n\n\nClass which represent a database index. Provides attributes and methods for details of the index.\n\n\nKind\n: global class  \n\n\n\n\nIndex\n\n\nnew Index(args)\n\n\n.name\n : \nstring\n\n\n.fullName\n : \nstring\n\n\n.fullCatalogName\n : \nstring\n\n\n.isUnique\n : \nboolean\n\n\n.isPrimaryKey\n : \nboolean\n\n\n.table\n : \nTable\n\n\n.parent\n : \nTable\n\n\n.db\n : \nDB\n\n\n.schema\n : \nSchema\n\n\n.columns\n : \nArray.\nColumn\n \n \nnull\n\n\n.columnsByName\n : \nObject.\nstring, Column\n \n \nnull\n\n\n\n\n\n\nnew Index(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nIndex arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js database object.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nIndex\n instance.\n\n\n\n\n\n\n\n\n\n\nindex.name : \nstring\n\n\nName of the index.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.fullName : \nstring\n\n\nFull name of the \nindex\n with (.) notation.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = index.fullName; // crm.public\n\n\n\n\n\n\nindex.fullCatalogName : \nstring\n\n\nFull name of the \nindex\n with (.) notation including catalog name.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullCatalogName = index.fullCatalogName; // crm.public\n\n\n\n\n\n\nindex.isUnique : \nboolean\n\n\nIf true, this is a unique index.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.isPrimaryKey : \nboolean\n\n\nIf true, this index represents the primary key of the table (\nisUnique\n should always be true when this is true.)\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.table : \nTable\n\n\nTable\n which this \nindex\n belongs to.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.parent : \nTable\n\n\nTable\n which this \nindex\n belongs to.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.db : \nDB\n\n\nDB\n this \nindex\n belongs to.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.schema : \nSchema\n\n\nSchema\n this \nindex\n belongs to.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.columns : \nArray.\nColumn\n \n \nnull\n\n\nList of \ncolumns\n restricted by \nindex\n, in order their ordinal position\nwithin the index key. If \nindex\n does not have any \ncolumns\n this is \nnull\n.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true\n\n\n\n\nindex.columnsByName : \nObject.\nstring, Column\n \n \nnull\n\n\nList of columns restricted by \nindex\n, in order their ordinal position within the index key.\nIf \nindex\n does not have any columns this is \nnull\n.\n\n\nKind\n: instance property of \nIndex\n\n\nRead only\n: true", 
            "title": "Index"
        }, 
        {
            "location": "/api/pg-index/#index", 
            "text": "Class which represent a database index. Provides attributes and methods for details of the index.  Kind : global class     Index  new Index(args)  .name  :  string  .fullName  :  string  .fullCatalogName  :  string  .isUnique  :  boolean  .isPrimaryKey  :  boolean  .table  :  Table  .parent  :  Table  .db  :  DB  .schema  :  Schema  .columns  :  Array. Column     null  .columnsByName  :  Object. string, Column     null    new Index(args)     Param  Type  Description      args  Object  Index arguments.    args.registry  Loki  Loki.js database object.    args.attributes  Object  Attributes of the  Index  instance.      index.name :  string  Name of the index.  Kind : instance property of  Index  Read only : true   index.fullName :  string  Full name of the  index  with (.) notation.  Kind : instance property of  Index  Read only : true  Example     var fullName = index.fullName; // crm.public   index.fullCatalogName :  string  Full name of the  index  with (.) notation including catalog name.  Kind : instance property of  Index  Read only : true  Example     var fullCatalogName = index.fullCatalogName; // crm.public   index.isUnique :  boolean  If true, this is a unique index.  Kind : instance property of  Index  Read only : true   index.isPrimaryKey :  boolean  If true, this index represents the primary key of the table ( isUnique  should always be true when this is true.)  Kind : instance property of  Index  Read only : true   index.table :  Table  Table  which this  index  belongs to.  Kind : instance property of  Index  Read only : true   index.parent :  Table  Table  which this  index  belongs to.  Kind : instance property of  Index  Read only : true   index.db :  DB  DB  this  index  belongs to.  Kind : instance property of  Index  Read only : true   index.schema :  Schema  Schema  this  index  belongs to.  Kind : instance property of  Index  Read only : true   index.columns :  Array. Column     null  List of  columns  restricted by  index , in order their ordinal position\nwithin the index key. If  index  does not have any  columns  this is  null .  Kind : instance property of  Index  Read only : true   index.columnsByName :  Object. string, Column     null  List of columns restricted by  index , in order their ordinal position within the index key.\nIf  index  does not have any columns this is  null .  Kind : instance property of  Index  Read only : true", 
            "title": "Index"
        }, 
        {
            "location": "/api/relation/", 
            "text": "Relation\n\n\nBase class for relations. Not used directly. See child classes.\n\n\nKind\n: global class\n\n\nSee\n\n\n\n\nO2MRelation\n for one to many relationships.\n\n\nM2MRelation\n for many to many relationships.\n\n\nM2ORelation\n for many to one relationships.\n\n\n\n\n\n\nnew Relation(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nReferential constraint arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js database object.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nRelation\n instance.", 
            "title": "Relation"
        }, 
        {
            "location": "/api/relation/#relation", 
            "text": "Base class for relations. Not used directly. See child classes.  Kind : global class  See   O2MRelation  for one to many relationships.  M2MRelation  for many to many relationships.  M2ORelation  for many to one relationships.    new Relation(args)     Param  Type  Description      args  Object  Referential constraint arguments.    args.registry  Loki  Loki.js database object.    args.attributes  Object  Attributes of the  Relation  instance.", 
            "title": "Relation"
        }, 
        {
            "location": "/api/schema/", 
            "text": "Schema\n\n\nClass which represent a PostgreSQL schema. Provides attributes and methods for details of the database.\n\n\nKind\n: global class  \n\n\n\n\nSchema\n\n\nnew Schema(args)\n\n\n.name\n : \nstring\n\n\n.fullName\n : \nstring\n\n\n.fullCatalogName\n : \nstring\n\n\n.db\n : \nDB\n\n\n.parent\n : \nDB\n\n\n.tables\n : \nArray.\nTable\n \n \nnull\n\n\n.getTable(key)\n \u21d2 \nTable\n \n \nundefined\n\n\n.tableExists(name)\n \u21d2 \nboolean\n\n\n.get(path)\n \u21d2 \nTable\n \n \nColumn\n \n \nundefined\n\n\n.getTables([callback])\n \u21d2 \nArray.\nTable\n \n \nundefined\n \n \nnull\n\n\n\n\n\n\nnew Schema(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nDatabase arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js object to get database details.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nSchema\n instance.\n\n\n\n\n\n\n\n\n\n\nschema.name : \nstring\n\n\nName of the schema.\n\n\nKind\n: instance property of \nSchema\n\n\nRead only\n: true\n\n\n\n\nschema.fullName : \nstring\n\n\nFull name of the \nSchema\n with (.) notation.\n\n\nKind\n: instance property of \nSchema\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = schema.fullName; // crm.public\n\n\n\n\n\n\nschema.fullCatalogName : \nstring\n\n\nFull name of the \nSchema\n with (.) notation including catalog name.\n\n\nKind\n: instance property of \nSchema\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullCatalogName = schema.fullCatalogName; // crm.public\n\n\n\n\n\n\nschema.db : \nDB\n\n\nDB\n this schema belongs to.\n\n\nKind\n: instance property of \nSchema\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nparent\n\n\nExample\n  \n\n\nvar db = schema.db; // DB instance\n\n\n\n\n\n\nschema.parent : \nDB\n\n\nDB\n this schema belongs to.\n\n\nKind\n: instance property of \nSchema\n\n\nRead only\n: true\n\n\nSee\n: Aliases \ndb\n\n\nExample\n  \n\n\nvar db = schema.parent; // DB instance\n\n\n\n\n\n\nschema.tables : \nArray.\nTable\n \n \nnull\n\n\nAll \nTable\n instances in the database as an array. They are ordered by same order they are added.\n\n\nKind\n: instance property of \nSchema\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar tables = schema.tables;\nvar name   = tables[0].name;\n\n\n\n\n\n\nschema.getTable(key) \u21d2 \nTable\n \n \nundefined\n\n\nReturns \nTable\n instance with given name or order.\n\n\nKind\n: instance method of \nSchema\n\n\nReturns\n: \nTable\n \n \nundefined\n - - Requested \nTable\n instance.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n \n \nnumber\n\n\nName or order number of the table.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar table = schema.getTable('account');\n\n\n\n\n\n\nschema.tableExists(name) \u21d2 \nboolean\n\n\nReturns true if \nTable\n instance with given name or order number exists.\n\n\nKind\n: instance method of \nSchema\n\n\nReturns\n: \nboolean\n - - \ntrue\n if table exists in schema, otherwise \nfalse\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n \n \nnumber\n\n\nName or order number of the table.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar accountExists = db.TableExists('account'); // true\nvar cakeExists    = db.TableExists('cake');  // false\n\n\n\n\n\n\nschema.get(path) \u21d2 \nTable\n \n \nColumn\n \n \nundefined\n\n\nReturns \nTable\n or \nColumn\n on given path relative to \nSchema\n. Path should be in dot (.) notation.\n\n\nKind\n: instance method of \nSchema\n\n\nReturns\n: \nTable\n \n \nColumn\n \n \nundefined\n - - Requested item.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath of the requested item in dot (.) notation such as 'public.contact'\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar table  = db.get('contact'),      // Returns contact table in public schema.\n    column = db.get('contact.name'); // Returns name column of the contact table.\n\n\n\n\n\n\nschema.getTables([callback]) \u21d2 \nArray.\nTable\n \n \nundefined\n \n \nnull\n\n\nRetrieves all tables in the schema and executes given callback, if provided. Callback has a signature of\n(\nTable\n, index, collection). If no callback is provided, returns an array of all \ntables\n.\n\n\nKind\n: instance method of \nSchema\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedTableCallback\n\n\nCallback to be executed for each table.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ndb.getTables(function(table, i, collection) {\n    var name = table.name;\n    var ord  = i;\n);", 
            "title": "Schema"
        }, 
        {
            "location": "/api/schema/#schema", 
            "text": "Class which represent a PostgreSQL schema. Provides attributes and methods for details of the database.  Kind : global class     Schema  new Schema(args)  .name  :  string  .fullName  :  string  .fullCatalogName  :  string  .db  :  DB  .parent  :  DB  .tables  :  Array. Table     null  .getTable(key)  \u21d2  Table     undefined  .tableExists(name)  \u21d2  boolean  .get(path)  \u21d2  Table     Column     undefined  .getTables([callback])  \u21d2  Array. Table     undefined     null    new Schema(args)     Param  Type  Description      args  Object  Database arguments.    args.registry  Loki  Loki.js object to get database details.    args.attributes  Object  Attributes of the  Schema  instance.      schema.name :  string  Name of the schema.  Kind : instance property of  Schema  Read only : true   schema.fullName :  string  Full name of the  Schema  with (.) notation.  Kind : instance property of  Schema  Read only : true  Example     var fullName = schema.fullName; // crm.public   schema.fullCatalogName :  string  Full name of the  Schema  with (.) notation including catalog name.  Kind : instance property of  Schema  Read only : true  Example     var fullCatalogName = schema.fullCatalogName; // crm.public   schema.db :  DB  DB  this schema belongs to.  Kind : instance property of  Schema  Read only : true  See : Aliases  parent  Example     var db = schema.db; // DB instance   schema.parent :  DB  DB  this schema belongs to.  Kind : instance property of  Schema  Read only : true  See : Aliases  db  Example     var db = schema.parent; // DB instance   schema.tables :  Array. Table     null  All  Table  instances in the database as an array. They are ordered by same order they are added.  Kind : instance property of  Schema  Read only : true  Example     var tables = schema.tables;\nvar name   = tables[0].name;   schema.getTable(key) \u21d2  Table     undefined  Returns  Table  instance with given name or order.  Kind : instance method of  Schema  Returns :  Table     undefined  - - Requested  Table  instance.       Param  Type  Description      key  string     number  Name or order number of the table.     Example     var table = schema.getTable('account');   schema.tableExists(name) \u21d2  boolean  Returns true if  Table  instance with given name or order number exists.  Kind : instance method of  Schema  Returns :  boolean  - -  true  if table exists in schema, otherwise  false        Param  Type  Description      name  string     number  Name or order number of the table.     Example     var accountExists = db.TableExists('account'); // true\nvar cakeExists    = db.TableExists('cake');  // false   schema.get(path) \u21d2  Table     Column     undefined  Returns  Table  or  Column  on given path relative to  Schema . Path should be in dot (.) notation.  Kind : instance method of  Schema  Returns :  Table     Column     undefined  - - Requested item.       Param  Type  Description      path  string  Path of the requested item in dot (.) notation such as 'public.contact'     Example     var table  = db.get('contact'),      // Returns contact table in public schema.\n    column = db.get('contact.name'); // Returns name column of the contact table.   schema.getTables([callback]) \u21d2  Array. Table     undefined     null  Retrieves all tables in the schema and executes given callback, if provided. Callback has a signature of\n( Table , index, collection). If no callback is provided, returns an array of all  tables .  Kind : instance method of  Schema        Param  Type  Description      [callback]  orderedTableCallback  Callback to be executed for each table.     Example     db.getTables(function(table, i, collection) {\n    var name = table.name;\n    var ord  = i;\n);", 
            "title": "Schema"
        }, 
        {
            "location": "/api/table/", 
            "text": "Table\n\n\nClass which represent a table. Provides attributes and methods for details of the table. Tables have relationships\nwith other tables.\n\n\nBelow is a database schema which is used in code examples.\n\n\nsize -------------------\nid (PK)                |  ---------------------------\n line_item \n------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------\n product \n------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)\n\n\n\n\nBelow is the same schema as image:\n\n\n\nKind\n: global class  \n\n\n\n\nTable\n\n\nnew Table(args)\n\n\n.name\n : \nstring\n\n\n.fullName\n : \nstring\n\n\n.fullCatalogName\n : \nstring\n\n\n.schema\n : \nSchema\n\n\n.parent\n : \nSchema\n\n\n.columns\n : \nArray.\nColumn\n \n \nnull\n\n\n.columnsByName\n : \nObject.\nstring, Column\n \n \nnull\n\n\n.constraints\n : \nArray.\nConstraint\n \n \nnull\n\n\n.constraintsByName\n : \nObject.\nstring, Constraint\n \n \nnull\n\n\n.db\n : \nDB\n\n\n.foreignKeyConstraints\n : \nArray.\nConstraint\n \n \nnull\n\n\n.foreignKeyConstraintsByName\n : \nObject.\nstring, Constraint\n \n \nnull\n\n\n.foreignKeyColumns\n : \nArray.\nColumn\n \n \nnull\n\n\n.foreignKeyColumnsByName\n : \nObject.\nstring, Column\n \n \nnull\n\n\n.primaryKeyConstraint\n : \nConstraint\n \n \nundefined\n\n\n.primaryKeyColumns\n : \nArray.\nColumn\n \n \nnull\n\n\n.primaryKeyColumnsByName\n : \nObject.\nstring, Column\n \n \nnull\n\n\n.hasManyTables\n : \nArray.\nTable\n \n \nnull\n\n\n.hasManyTablesByName\n : \nObject.\nstring, Table\n \n \nnull\n\n\n.hasManyTablesByFullName\n : \nObject.\nstring, Table\n \n \nnull\n\n\n.belongsToTables\n : \nArray.\nTable\n \n \nnull\n\n\n.belongsToTablesByName\n : \nObject.\nstring, Table\n \n \nnull\n\n\n.belongsToTablesByFullName\n : \nObject.\nstring, Table\n \n \nnull\n\n\n.belongsToManyTables\n : \nArray.\nTable\n \n \nnull\n\n\n.belongsToManyTablesByName\n : \nObject.\nstring, Table\n \n \nnull\n\n\n.belongsToManyTablesByFullName\n : \nObject.\nstring, Table\n \n \nnull\n\n\n.m2mRelations\n : \nArray.\nM2MRelation\n \n \nnull\n\n\n.o2mRelations\n : \nArray.\nO2MRelation\n \n \nnull\n\n\n.m2oRelations\n : \nArray.\nM2ORelation\n \n \nnull\n\n\n.indexes\n : \nArray.\nIndex\n \n \nnull\n\n\n.getColumn(key)\n \u21d2 \nColumn\n \n \nundefined\n\n\n.columnExists(name)\n \u21d2 \nboolean\n\n\n.get(path)\n \u21d2 \nColumn\n \n \nundefined\n\n\n.getColumns([callback])\n \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\n.getConstraints([callback])\n \u21d2 \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n\n\n.getForeignKeyConstraints([callback])\n \u21d2 \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n\n\n.getForeignKeyColumns([callback])\n \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\n.getPrimaryKeyColumns([callback])\n \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\n.getPrimaryKeyConstraint([callback])\n \u21d2 \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n\n\n.getHasManyTables([callback])\n \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\n.getBelongsToTables([callback])\n \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\n.getBelongsToManyTables([callback])\n \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\n.getM2MRelations([callback])\n \u21d2 \nArray.\nM2MRelation\n \n \nundefined\n \n \nnull\n\n\n.getO2MRelations([callback])\n \u21d2 \nArray.\nO2MRelation\n \n \nundefined\n \n \nnull\n\n\n.getM2ORelations([callback])\n \u21d2 \nArray.\nM2ORelation\n \n \nundefined\n \n \nnull\n\n\n.getIndexes([callback])\n \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\n\n\n\n\nnew Table(args)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nObject\n\n\nDatabase arguments.\n\n\n\n\n\n\nargs.registry\n\n\nLoki\n\n\nLoki.js database object.\n\n\n\n\n\n\nargs.attributes\n\n\nObject\n\n\nAttributes of the \nTable\n instance.\n\n\n\n\n\n\n\n\n\n\ntable.name : \nstring\n\n\nName of the table.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.fullName : \nstring\n\n\nFull name of the \nTable\n with (.) notation.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = table.fullName; // public.account\n\n\n\n\n\n\ntable.fullCatalogName : \nstring\n\n\nFull name of the \nTable\n with (.) notation including catalog name.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar fullName = table.fullName; // crm.public.account\n\n\n\n\n\n\ntable.schema : \nSchema\n\n\nSchema\n this table belongs to.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nparent\n\n\nExample\n  \n\n\nvar schema = table.schema; // Schema instance\n\n\n\n\n\n\ntable.parent : \nSchema\n\n\nSchema\n this table belongs to.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: Aliases \nschema\n\n\nExample\n  \n\n\nvar schema = table.parent; // Schema instance\n\n\n\n\n\n\ntable.columns : \nArray.\nColumn\n \n \nnull\n\n\nAll \nColumn\n instances in the table as an array. They are ordered by same order they are added.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar columns = table.columns;\nvar name    = columns[0].name;\n\n\n\n\n\n\ntable.columnsByName : \nObject.\nstring, Column\n \n \nnull\n\n\nAll \nColumn\n instances in the table as a simple object. Keys are column names, values are \nColumn\n instances.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nvar columns   = table.columnsByName;\nvar ageColumn = columns.age;\n\n\n\n\n\n\ntable.constraints : \nArray.\nConstraint\n \n \nnull\n\n\nAll \nConstraint\n instances in the table as an array. They are ordered by same order they are added.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.constraintsByName : \nObject.\nstring, Constraint\n \n \nnull\n\n\nAll \nConstraint\n instances in the table as a simple object. Keys are constraint names, values are \nConstraint\n instances.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.db : \nDB\n\n\nDB\n this table belongs to.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.foreignKeyConstraints : \nArray.\nConstraint\n \n \nnull\n\n\nAll \nConstraint\n instances which are foreign key constraints in the table as an array.\nThey are ordered by same order they are defined in database.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \no2mRelations\n, \nm2oRelations\n, \nm2mRelations\n to get more details about \nrelations\n.\n\n\n\n\ntable.foreignKeyConstraintsByName : \nObject.\nstring, Constraint\n \n \nnull\n\n\nAll \nConstraint\n instances which are foreign key constraints in the table as a simple object.\nKeys are constraint names, values are \nConstraint\n instances.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \no2mRelations\n, \nm2oRelations\n, \nm2mRelations\n to get more details about \nrelations\n.\n\n\n\n\ntable.foreignKeyColumns : \nArray.\nColumn\n \n \nnull\n\n\nAll foreign key \ncolumns\n of all \nforeignKeyConstraints\n.\nForeign key \nconstraints\n may contain more than one column. To get foreign key columns of a specific foreign key constraint\nuse \nforeignKeyConstraints\n.\ncolumns\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.foreignKeyColumnsByName : \nObject.\nstring, Column\n \n \nnull\n\n\nObject containing foreign key \ncolumns\n of this table. Keys are column names, values are\n\ncolumns\n instances.\nForeign key \nconstraints\n may contain more than one column. To get foreign key columns of a specific foreign key constraint\nuse \nforeignKeyConstraints\n.\ncolumns\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nExample\n  \n\n\nlet pkColumns  = table.foreignKeyColumnsByName;\n\n\n\n\n\n\ntable.primaryKeyConstraint : \nConstraint\n \n \nundefined\n\n\nPrimary key \nconstraint\n instance of this table.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \nprimaryKeyColumns\n to get primary key columns directly.\n\n\nExample\n  \n\n\nlet pkConstraint = table.primaryKeyConstraint;\nlet pkColumns  = pkConstraint.columns;\n\n\n\n\n\n\ntable.primaryKeyColumns : \nArray.\nColumn\n \n \nnull\n\n\nPrimary key \ncolumns\n of this table.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \nprimaryKeyConstraint\n to get primary key constraint.\n\n\nExample\n  \n\n\nlet pkColumns  = table.primaryKeyColumns;\n\n\n\n\n\n\ntable.primaryKeyColumnsByName : \nObject.\nstring, Column\n \n \nnull\n\n\nObject containing primary key \ncolumns\n of this table. Keys are column names, values are\n\ncolumns\n instances.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \nprimaryKeyConstraint\n to get primary key constraint.\n\n\nExample\n  \n\n\nlet pkColumns  = table.primaryKeyColumnsByName;\n\n\n\n\n\n\ntable.hasManyTables : \nArray.\nTable\n \n \nnull\n\n\nTables\n which this table has relationship of type \none to many\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \nExample schema\n\n\nExample\n  \n\n\n// Vendor (id) has many products (vendor_id)\nlet productTable = vendorTable.hasManyTables[0];\n\n\n\n\n\n\ntable.hasManyTablesByName : \nObject.\nstring, Table\n \n \nnull\n\n\nObject of \nTables\n which this table has relationship of type \none to many\n. Object keys\nare table names, object values are \nTable\n instances.\n\n CAVEAT: Two tables may have same name in different schemas\n, such as \npublic.account\n and \nother_schema.account\n.\nThis is not a problem if there is only one PostgreSQL schema i.e. public. Otherwise it is advised to be used\n\nhasManyTablesByFullName\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nExample schema\n\n\nhasManyTablesByFullName\n\n\n\n\nExample\n  \n\n\n// Vendor (id) has many products (vendor_id)\nlet productTable = vendorTable.hasManyTablesByName.product;\n\n\n\n\n\n\ntable.hasManyTablesByFullName : \nObject.\nstring, Table\n \n \nnull\n\n\nObject of \nTables\n which this table has relationship of type \none to many\n. Object keys\nare table names including schema name (i.e. \npublic.account\n), object values are \nTable\n instances.\n\n CAVEAT: Full table name contains a dot (.). You should access them with bracket notation. See example below.\n\n\nhasManyTablesByName\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nExample schema\n\n\nhasManyTablesByName\n\n\n\n\nExample\n  \n\n\n// Vendor (id) has many products (vendor_id)\nlet productTable = vendorTable.hasManyTablesByFullName['public.product'];\n\n\n\n\n\n\ntable.belongsToTables : \nArray.\nTable\n \n \nnull\n\n\nTables\n which this table has relationship of type \nbelongs to\n which is reverse direction of \none to many\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \nExample schema\n\n\nExample\n  \n\n\n// Vendor (id) has many products (vendor_id)\nlet vendorTable = productTable.belongsToTables[0];\n\n\n\n\n\n\ntable.belongsToTablesByName : \nObject.\nstring, Table\n \n \nnull\n\n\nObject of \nTables\n which this table has relationship of type \nbelongs to\n which is reverse direction of \none to many\n. Object keys\nare table names, object values are \nTable\n instances.\n\n CAVEAT: Two tables may have same name in different schemas\n, such as \npublic.account\n and \nother_schema.account\n.\nThis is not a problem if there is only one PostgreSQL schema i.e. public. Otherwise it is advised to be used\n\nbelongsToTablesByFullName\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nExample schema\n\n\nbelongsToTablesByFullName\n\n\n\n\nExample\n  \n\n\n// Vendor (id) has many products (vendor_id)\nlet vendorTable = productTable.belongsToTablesByName.product;\n\n\n\n\n\n\ntable.belongsToTablesByFullName : \nObject.\nstring, Table\n \n \nnull\n\n\nObject of \nTables\n which this table has relationship of type \nbelongs to\n which is reverse direction of \none to many\n. Object keys\nare table names including schema name (i.e. \npublic.account\n), object values are \nTable\n instances.\n\n CAVEAT: Full table name contains a dot (.). You should access them with bracket notation. See example below.\n\n\nbelongsToTablesByName\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nExample schema\n\n\nbelongsToTablesByName\n\n\n\n\nExample\n  \n\n\n// Vendor (id) has many products (vendor_id)\nlet vendorTable = productTable.belongsToTablesByFullName['public.product'];\n\n\n\n\n\n\ntable.belongsToManyTables : \nArray.\nTable\n \n \nnull\n\n\nTables\n which this table has relationship of type \nmany to many\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n: \nExample schema\n\n\nExample\n  \n\n\n// Cart (id) has many products (id) through line_item join table.\nlet productTable = cartTable.belongsToManyTables[0];\n\n\n\n\n\n\ntable.belongsToManyTablesByName : \nObject.\nstring, Table\n \n \nnull\n\n\nObject of \nTables\n which this table has relationship of type \nmany to many\n. Object keys\nare table names, object values are \nTable\n instances.\n\n CAVEAT: Two tables may have same name in different schemas\n, such as \npublic.account\n and \nother_schema.account\n.\nThis is not a problem if there is only one PostgreSQL schema i.e. public. Otherwise it is advised to be used\n\nbelongsToManyTablesByFullName\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nExample schema\n\n\nbelongsToManyTablesByFullName\n\n\n\n\nExample\n  \n\n\n// Cart (id) has many products (id) through line_item join table.\nlet productTable = cartTable.belongsToManyTablesByName.product;\n\n\n\n\n\n\ntable.belongsToManyTablesByFullName : \nObject.\nstring, Table\n \n \nnull\n\n\nObject of \nTables\n which this table has relationship of type \nmany to many\n. Object keys\nare table names including schema name (i.e. \npublic.account\n), object values are \nTable\n instances.\n\n CAVEAT: Full table name contains a dot (.). You should access them with bracket notation. See example below.\n\n\nbelongsToManyTablesByName\n.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\nSee\n\n\n\n\nExample schema\n\n\nbelongsToManyTablesByName\n\n\n\n\nExample\n  \n\n\n// Cart (id) has many products (id) through line_item join table.\nlet productTable = cartTable.belongsToManyTablesByName['public.product'];\n\n\n\n\n\n\ntable.m2mRelations : \nArray.\nM2MRelation\n \n \nnull\n\n\nList of \nmany to many relationships\n of the table. \nM2MRelation\n resembles\n\nhas many through\n and \nbelongs to many\n relations in ORMs has some useful methods and information for generating ORM classes.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.o2mRelations : \nArray.\nO2MRelation\n \n \nnull\n\n\nList of \none to many relationships\n of the table. \nO2MRelation\n resembles\n\nhas many\n relations in ORMs and has some useful methods and information for generating ORM classes.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.m2oRelations : \nArray.\nM2ORelation\n \n \nnull\n\n\nList of \nmany to one relationships\n of the table. \nM2ORelation\n resembles\n\nbelongs to\n relations in ORMs and has some useful methods and information for generating ORM classes.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.indexes : \nArray.\nIndex\n \n \nnull\n\n\nList of \nindexes\n, which this table has. Results are ordered by index name.\n\n\nKind\n: instance property of \nTable\n\n\nRead only\n: true\n\n\n\n\ntable.getColumn(key) \u21d2 \nColumn\n \n \nundefined\n\n\nReturns \nColumn\n instance with given name or order.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nColumn\n \n \nundefined\n - - Requested \nColumn\n instance.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n \n \nnumber\n\n\nName or order number of the column.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar column = table.getColumn('surname');\n\n\n\n\n\n\ntable.columnExists(name) \u21d2 \nboolean\n\n\nReturns true if \nColumn\n instance with given name or order number exists.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nboolean\n - - \ntrue\n if schema column in table, otherwise \nfalse\n.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n \n \nnumber\n\n\nName or order number of the column.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar ageColumn  = db.schemaExists('age');  // true\nvar jokeColumn = db.schemaExists('joke'); // false\n\n\n\n\n\n\ntable.get(path) \u21d2 \nColumn\n \n \nundefined\n\n\nReturns \nColumn\n on given path relative to \nTable\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nColumn\n \n \nundefined\n - - Requested item.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath of the requested item in dot (.) notation such as 'public.contact'\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar column = table.get('contact'),      // Returns contact column in public table.\n\n\n\n\n\n\ntable.getColumns([callback]) \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\nRetrieves all columns in the table, executes given callback and returns null, if provided. Callback has a signature of\n(\nColumn\n, index, collection). If no callback is provided, returns an array of all \ncolumns\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nColumn\n \n \nundefined\n \n \nnull\n - - All \ncolumns\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedColumnCallback\n\n\nCallback to be executed for each column.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nschema.getColumns(function(column, i, collection) {\n    var name = column.name;\n    var ord  = i;\n);\n\n\n\n\n\n\ntable.getConstraints([callback]) \u21d2 \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n\n\nRetrieves all constraints in the table, executes given callback and returns null, if provided. Callback has a signature of\n(\nConstraint\n, index, collection). If no callback is provided, returns an array of all \nconstraints\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n - - All \nconstraints\n of the table.\n\n\nSee\n: \ngetForeignKeyConstraints\n to get only foreign key constraints.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedConstraintCallback\n\n\nCallback to be executed for each constraint.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ntable.getConstraints(function(constraint, i, collection) {\n    var name = constraint.name;\n    var ord  = i;\n);\n\n\n\n\n\n\ntable.getForeignKeyConstraints([callback]) \u21d2 \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n\n\nRetrieves all \nconstraints\n which are foreign key constraints in the table, executes given callback and returns null, if provided. Callback has a signature of\n(\nConstraint\n, index, collection). If no callback is provided, returns an array of all foreign key \nconstraints\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n - - All foreign key \nconstraints\n of the table.\n\n\nSee\n\n\n\n\ngetO2MRelations\n, \ngetM2MRelations\n to get more details about \nrelations\n.\n\n\ngetConstraints\n to get all constraints.\n\n\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedConstraintCallback\n\n\nCallback to be executed for each constraint.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ntable.getConstraints(function(constraint, i, collection) {\n    var name = constraint.name;\n    var ord  = i;\n);\n\n\n\n\n\n\ntable.getForeignKeyColumns([callback]) \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\nRetrieves all foreign key \ncolumns\n of all foreign key \nconstraints\n in the table, executes given callback and returns null, if provided. Callback has a signature of\n(\nColumn\n, index, collection). If no callback is provided, returns an array of all foreign key \ncolumns\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nColumn\n \n \nundefined\n \n \nnull\n - - All foreign key \ncolumns\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedColumnCallback\n\n\nCallback to be executed for each column.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ntable.getForeignKeyColumns(function(column, i, collection) {\n    var name = column.name;\n    var ord  = i;\n);\n\n\n\n\n\n\ntable.getPrimaryKeyColumns([callback]) \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\nRetrieves all primary key \ncolumns\n in the table, executes given callback and returns null, if provided. Callback has a signature of\n(\nColumn\n, index, collection). If no callback is provided, returns an array of all primary key \ncolumns\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nColumn\n \n \nundefined\n \n \nnull\n - - All primary key \ncolumns\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedColumnCallback\n\n\nCallback to be executed for each column.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ntable.getPrimaryKeyColumns(function(column, i, collection) {\n    var name = column.name;\n    var ord  = i;\n);\n\n\n\n\n\n\ntable.getPrimaryKeyConstraint([callback]) \u21d2 \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n\n\nRetrieves \nprimary key constraint\n of the table and executes given callback and returns null, if provided. Callback has a signature of\n(\nConstraint\n, index, collection). If no callback is provided, returns single element array of primary key \nconstraint\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nConstraint\n \n \nundefined\n \n \nnull\n - - Primary key \nconstraint\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedConstraintCallback\n\n\nCallback to be executed for single constraint.\n\n\n\n\n\n\n\n\nExample\n  \n\n\ntable.getPrimaryKeyConstraint(function(constraint, i, collection) {\n    var name = constraint.name;\n    var ord  = i;\n);\n\n\n\n\n\n\ntable.getHasManyTables([callback]) \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\nRetrieves all \ntables\n which this table has relationship of type \none to many\n, executes given callback and returns null if provided.\nCallback has a signature of (\nTable\n, index, collection). If no callback is provided, returns an array of all \ntables\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nColumn\n \n \nundefined\n \n \nnull\n - - All \ntables\n which this table has relationship of type \none to many\n.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedTableCallback\n\n\nCallback to be executed for each \ntable\n.\n\n\n\n\n\n\n\n\n\n\ntable.getBelongsToTables([callback]) \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\nRetrieves all \ntables\n which this table has relationship of type \none to many\n which is reverse direction of \none to many\n, executes given callback and returns null if provided.\nCallback has a signature of (\nTable\n, index, collection). If no callback is provided, returns an array of all \ntables\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nColumn\n \n \nundefined\n \n \nnull\n - - All \ntables\n which this table has relationship of type \none to many\n.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedTableCallback\n\n\nCallback to be executed for each \ntable\n.\n\n\n\n\n\n\n\n\n\n\ntable.getBelongsToManyTables([callback]) \u21d2 \nArray.\nColumn\n \n \nundefined\n \n \nnull\n\n\nRetrieves all \ntables\n which this table has relationship of type \nmany to many\n, executes given callback and returns null if provided.\nCallback has a signature of (\nTable\n, index, collection). If no callback is provided, returns an array of all \ntables\n.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nColumn\n \n \nundefined\n \n \nnull\n - - All \ntables\n which this table has relationship of type \nmany to many\n.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedTableCallback\n\n\nCallback to be executed for each \ntable\n.\n\n\n\n\n\n\n\n\n\n\ntable.getM2MRelations([callback]) \u21d2 \nArray.\nM2MRelation\n \n \nundefined\n \n \nnull\n\n\nList of \nmany to many relationships\n of the table. \nM2MRelation\n resembles\n\nhas many through\n and \nbelongs to many\n relations in ORMs has some useful methods and information for generating ORM classes.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nM2MRelation\n \n \nundefined\n \n \nnull\n - - \nM2M Relations\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedRelationCallback\n\n\nCallback to be executed for each \nmany to many relation\n.\n\n\n\n\n\n\n\n\n\n\ntable.getO2MRelations([callback]) \u21d2 \nArray.\nO2MRelation\n \n \nundefined\n \n \nnull\n\n\nList of \none to many relationships\n of the table. \nO2MRelation\n resembles\n\nhas many\n relations in ORMs and has some useful methods and information for generating ORM classes.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nO2MRelation\n \n \nundefined\n \n \nnull\n - - \nO2M Relations\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedRelationCallback\n\n\nCallback to be executed for each \none to many relation\n.\n\n\n\n\n\n\n\n\n\n\ntable.getM2ORelations([callback]) \u21d2 \nArray.\nM2ORelation\n \n \nundefined\n \n \nnull\n\n\nList of \nmany to one relationships\n of the table. \nM2ORelation\n resembles\n\nbelongs to\n relations in ORMs and has some useful methods and information for generating ORM classes.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nM2ORelation\n \n \nundefined\n \n \nnull\n - - \nM2O Relations\n of the table.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedRelationCallback\n\n\nCallback to be executed for each \nmany to one relation\n.\n\n\n\n\n\n\n\n\n\n\ntable.getIndexes([callback]) \u21d2 \nArray.\nIndex\n \n \nundefined\n \n \nnull\n\n\nExecutes callback for every \nIndex\n or returns list of \nindexes\n, which this table has.\nResults are ordered by index name.\n\n\nKind\n: instance method of \nTable\n\n\nReturns\n: \nArray.\nIndex\n \n \nundefined\n \n \nnull\n - - \nindexes\n this table has.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[callback]\n\n\norderedIndexCallback\n\n\nCallback to be executed for each \nIndex\n.", 
            "title": "Table"
        }, 
        {
            "location": "/api/table/#table", 
            "text": "Class which represent a table. Provides attributes and methods for details of the table. Tables have relationships\nwith other tables.  Below is a database schema which is used in code examples.  size -------------------\nid (PK)                |  ---------------------------  line_item  ------------ cart\nname                   |  |                            product_id (PFK)        id (PK)\n                       |  |                            cart_id    (PFK)        name\n                       ^  |\ncolor -------------  product  ------------- vendor\nid (PK)              id        (PK)         id (PK)\nname                 name                   name\n                     color_id  (FK)\n                     size_id   (FK)\n                     vendor_id (FK)  Below is the same schema as image:  Kind : global class     Table  new Table(args)  .name  :  string  .fullName  :  string  .fullCatalogName  :  string  .schema  :  Schema  .parent  :  Schema  .columns  :  Array. Column     null  .columnsByName  :  Object. string, Column     null  .constraints  :  Array. Constraint     null  .constraintsByName  :  Object. string, Constraint     null  .db  :  DB  .foreignKeyConstraints  :  Array. Constraint     null  .foreignKeyConstraintsByName  :  Object. string, Constraint     null  .foreignKeyColumns  :  Array. Column     null  .foreignKeyColumnsByName  :  Object. string, Column     null  .primaryKeyConstraint  :  Constraint     undefined  .primaryKeyColumns  :  Array. Column     null  .primaryKeyColumnsByName  :  Object. string, Column     null  .hasManyTables  :  Array. Table     null  .hasManyTablesByName  :  Object. string, Table     null  .hasManyTablesByFullName  :  Object. string, Table     null  .belongsToTables  :  Array. Table     null  .belongsToTablesByName  :  Object. string, Table     null  .belongsToTablesByFullName  :  Object. string, Table     null  .belongsToManyTables  :  Array. Table     null  .belongsToManyTablesByName  :  Object. string, Table     null  .belongsToManyTablesByFullName  :  Object. string, Table     null  .m2mRelations  :  Array. M2MRelation     null  .o2mRelations  :  Array. O2MRelation     null  .m2oRelations  :  Array. M2ORelation     null  .indexes  :  Array. Index     null  .getColumn(key)  \u21d2  Column     undefined  .columnExists(name)  \u21d2  boolean  .get(path)  \u21d2  Column     undefined  .getColumns([callback])  \u21d2  Array. Column     undefined     null  .getConstraints([callback])  \u21d2  Array. Constraint     undefined     null  .getForeignKeyConstraints([callback])  \u21d2  Array. Constraint     undefined     null  .getForeignKeyColumns([callback])  \u21d2  Array. Column     undefined     null  .getPrimaryKeyColumns([callback])  \u21d2  Array. Column     undefined     null  .getPrimaryKeyConstraint([callback])  \u21d2  Array. Constraint     undefined     null  .getHasManyTables([callback])  \u21d2  Array. Column     undefined     null  .getBelongsToTables([callback])  \u21d2  Array. Column     undefined     null  .getBelongsToManyTables([callback])  \u21d2  Array. Column     undefined     null  .getM2MRelations([callback])  \u21d2  Array. M2MRelation     undefined     null  .getO2MRelations([callback])  \u21d2  Array. O2MRelation     undefined     null  .getM2ORelations([callback])  \u21d2  Array. M2ORelation     undefined     null  .getIndexes([callback])  \u21d2  Array. Index     undefined     null    new Table(args)     Param  Type  Description      args  Object  Database arguments.    args.registry  Loki  Loki.js database object.    args.attributes  Object  Attributes of the  Table  instance.      table.name :  string  Name of the table.  Kind : instance property of  Table  Read only : true   table.fullName :  string  Full name of the  Table  with (.) notation.  Kind : instance property of  Table  Read only : true  Example     var fullName = table.fullName; // public.account   table.fullCatalogName :  string  Full name of the  Table  with (.) notation including catalog name.  Kind : instance property of  Table  Read only : true  Example     var fullName = table.fullName; // crm.public.account   table.schema :  Schema  Schema  this table belongs to.  Kind : instance property of  Table  Read only : true  See : Aliases  parent  Example     var schema = table.schema; // Schema instance   table.parent :  Schema  Schema  this table belongs to.  Kind : instance property of  Table  Read only : true  See : Aliases  schema  Example     var schema = table.parent; // Schema instance   table.columns :  Array. Column     null  All  Column  instances in the table as an array. They are ordered by same order they are added.  Kind : instance property of  Table  Read only : true  Example     var columns = table.columns;\nvar name    = columns[0].name;   table.columnsByName :  Object. string, Column     null  All  Column  instances in the table as a simple object. Keys are column names, values are  Column  instances.  Kind : instance property of  Table  Read only : true  Example     var columns   = table.columnsByName;\nvar ageColumn = columns.age;   table.constraints :  Array. Constraint     null  All  Constraint  instances in the table as an array. They are ordered by same order they are added.  Kind : instance property of  Table  Read only : true   table.constraintsByName :  Object. string, Constraint     null  All  Constraint  instances in the table as a simple object. Keys are constraint names, values are  Constraint  instances.  Kind : instance property of  Table  Read only : true   table.db :  DB  DB  this table belongs to.  Kind : instance property of  Table  Read only : true   table.foreignKeyConstraints :  Array. Constraint     null  All  Constraint  instances which are foreign key constraints in the table as an array.\nThey are ordered by same order they are defined in database.  Kind : instance property of  Table  Read only : true  See :  o2mRelations ,  m2oRelations ,  m2mRelations  to get more details about  relations .   table.foreignKeyConstraintsByName :  Object. string, Constraint     null  All  Constraint  instances which are foreign key constraints in the table as a simple object.\nKeys are constraint names, values are  Constraint  instances.  Kind : instance property of  Table  Read only : true  See :  o2mRelations ,  m2oRelations ,  m2mRelations  to get more details about  relations .   table.foreignKeyColumns :  Array. Column     null  All foreign key  columns  of all  foreignKeyConstraints .\nForeign key  constraints  may contain more than one column. To get foreign key columns of a specific foreign key constraint\nuse  foreignKeyConstraints . columns  Kind : instance property of  Table  Read only : true   table.foreignKeyColumnsByName :  Object. string, Column     null  Object containing foreign key  columns  of this table. Keys are column names, values are columns  instances.\nForeign key  constraints  may contain more than one column. To get foreign key columns of a specific foreign key constraint\nuse  foreignKeyConstraints . columns  Kind : instance property of  Table  Read only : true  Example     let pkColumns  = table.foreignKeyColumnsByName;   table.primaryKeyConstraint :  Constraint     undefined  Primary key  constraint  instance of this table.  Kind : instance property of  Table  Read only : true  See :  primaryKeyColumns  to get primary key columns directly.  Example     let pkConstraint = table.primaryKeyConstraint;\nlet pkColumns  = pkConstraint.columns;   table.primaryKeyColumns :  Array. Column     null  Primary key  columns  of this table.  Kind : instance property of  Table  Read only : true  See :  primaryKeyConstraint  to get primary key constraint.  Example     let pkColumns  = table.primaryKeyColumns;   table.primaryKeyColumnsByName :  Object. string, Column     null  Object containing primary key  columns  of this table. Keys are column names, values are columns  instances.  Kind : instance property of  Table  Read only : true  See :  primaryKeyConstraint  to get primary key constraint.  Example     let pkColumns  = table.primaryKeyColumnsByName;   table.hasManyTables :  Array. Table     null  Tables  which this table has relationship of type  one to many .  Kind : instance property of  Table  Read only : true  See :  Example schema  Example     // Vendor (id) has many products (vendor_id)\nlet productTable = vendorTable.hasManyTables[0];   table.hasManyTablesByName :  Object. string, Table     null  Object of  Tables  which this table has relationship of type  one to many . Object keys\nare table names, object values are  Table  instances.  CAVEAT: Two tables may have same name in different schemas , such as  public.account  and  other_schema.account .\nThis is not a problem if there is only one PostgreSQL schema i.e. public. Otherwise it is advised to be used hasManyTablesByFullName .  Kind : instance property of  Table  Read only : true  See   Example schema  hasManyTablesByFullName   Example     // Vendor (id) has many products (vendor_id)\nlet productTable = vendorTable.hasManyTablesByName.product;   table.hasManyTablesByFullName :  Object. string, Table     null  Object of  Tables  which this table has relationship of type  one to many . Object keys\nare table names including schema name (i.e.  public.account ), object values are  Table  instances.  CAVEAT: Full table name contains a dot (.). You should access them with bracket notation. See example below.  hasManyTablesByName .  Kind : instance property of  Table  Read only : true  See   Example schema  hasManyTablesByName   Example     // Vendor (id) has many products (vendor_id)\nlet productTable = vendorTable.hasManyTablesByFullName['public.product'];   table.belongsToTables :  Array. Table     null  Tables  which this table has relationship of type  belongs to  which is reverse direction of  one to many .  Kind : instance property of  Table  Read only : true  See :  Example schema  Example     // Vendor (id) has many products (vendor_id)\nlet vendorTable = productTable.belongsToTables[0];   table.belongsToTablesByName :  Object. string, Table     null  Object of  Tables  which this table has relationship of type  belongs to  which is reverse direction of  one to many . Object keys\nare table names, object values are  Table  instances.  CAVEAT: Two tables may have same name in different schemas , such as  public.account  and  other_schema.account .\nThis is not a problem if there is only one PostgreSQL schema i.e. public. Otherwise it is advised to be used belongsToTablesByFullName .  Kind : instance property of  Table  Read only : true  See   Example schema  belongsToTablesByFullName   Example     // Vendor (id) has many products (vendor_id)\nlet vendorTable = productTable.belongsToTablesByName.product;   table.belongsToTablesByFullName :  Object. string, Table     null  Object of  Tables  which this table has relationship of type  belongs to  which is reverse direction of  one to many . Object keys\nare table names including schema name (i.e.  public.account ), object values are  Table  instances.  CAVEAT: Full table name contains a dot (.). You should access them with bracket notation. See example below.  belongsToTablesByName .  Kind : instance property of  Table  Read only : true  See   Example schema  belongsToTablesByName   Example     // Vendor (id) has many products (vendor_id)\nlet vendorTable = productTable.belongsToTablesByFullName['public.product'];   table.belongsToManyTables :  Array. Table     null  Tables  which this table has relationship of type  many to many .  Kind : instance property of  Table  Read only : true  See :  Example schema  Example     // Cart (id) has many products (id) through line_item join table.\nlet productTable = cartTable.belongsToManyTables[0];   table.belongsToManyTablesByName :  Object. string, Table     null  Object of  Tables  which this table has relationship of type  many to many . Object keys\nare table names, object values are  Table  instances.  CAVEAT: Two tables may have same name in different schemas , such as  public.account  and  other_schema.account .\nThis is not a problem if there is only one PostgreSQL schema i.e. public. Otherwise it is advised to be used belongsToManyTablesByFullName .  Kind : instance property of  Table  Read only : true  See   Example schema  belongsToManyTablesByFullName   Example     // Cart (id) has many products (id) through line_item join table.\nlet productTable = cartTable.belongsToManyTablesByName.product;   table.belongsToManyTablesByFullName :  Object. string, Table     null  Object of  Tables  which this table has relationship of type  many to many . Object keys\nare table names including schema name (i.e.  public.account ), object values are  Table  instances.  CAVEAT: Full table name contains a dot (.). You should access them with bracket notation. See example below.  belongsToManyTablesByName .  Kind : instance property of  Table  Read only : true  See   Example schema  belongsToManyTablesByName   Example     // Cart (id) has many products (id) through line_item join table.\nlet productTable = cartTable.belongsToManyTablesByName['public.product'];   table.m2mRelations :  Array. M2MRelation     null  List of  many to many relationships  of the table.  M2MRelation  resembles has many through  and  belongs to many  relations in ORMs has some useful methods and information for generating ORM classes.  Kind : instance property of  Table  Read only : true   table.o2mRelations :  Array. O2MRelation     null  List of  one to many relationships  of the table.  O2MRelation  resembles has many  relations in ORMs and has some useful methods and information for generating ORM classes.  Kind : instance property of  Table  Read only : true   table.m2oRelations :  Array. M2ORelation     null  List of  many to one relationships  of the table.  M2ORelation  resembles belongs to  relations in ORMs and has some useful methods and information for generating ORM classes.  Kind : instance property of  Table  Read only : true   table.indexes :  Array. Index     null  List of  indexes , which this table has. Results are ordered by index name.  Kind : instance property of  Table  Read only : true   table.getColumn(key) \u21d2  Column     undefined  Returns  Column  instance with given name or order.  Kind : instance method of  Table  Returns :  Column     undefined  - - Requested  Column  instance.       Param  Type  Description      key  string     number  Name or order number of the column.     Example     var column = table.getColumn('surname');   table.columnExists(name) \u21d2  boolean  Returns true if  Column  instance with given name or order number exists.  Kind : instance method of  Table  Returns :  boolean  - -  true  if schema column in table, otherwise  false .       Param  Type  Description      name  string     number  Name or order number of the column.     Example     var ageColumn  = db.schemaExists('age');  // true\nvar jokeColumn = db.schemaExists('joke'); // false   table.get(path) \u21d2  Column     undefined  Returns  Column  on given path relative to  Table .  Kind : instance method of  Table  Returns :  Column     undefined  - - Requested item.       Param  Type  Description      path  string  Path of the requested item in dot (.) notation such as 'public.contact'     Example     var column = table.get('contact'),      // Returns contact column in public table.   table.getColumns([callback]) \u21d2  Array. Column     undefined     null  Retrieves all columns in the table, executes given callback and returns null, if provided. Callback has a signature of\n( Column , index, collection). If no callback is provided, returns an array of all  columns .  Kind : instance method of  Table  Returns :  Array. Column     undefined     null  - - All  columns  of the table.       Param  Type  Description      [callback]  orderedColumnCallback  Callback to be executed for each column.     Example     schema.getColumns(function(column, i, collection) {\n    var name = column.name;\n    var ord  = i;\n);   table.getConstraints([callback]) \u21d2  Array. Constraint     undefined     null  Retrieves all constraints in the table, executes given callback and returns null, if provided. Callback has a signature of\n( Constraint , index, collection). If no callback is provided, returns an array of all  constraints .  Kind : instance method of  Table  Returns :  Array. Constraint     undefined     null  - - All  constraints  of the table.  See :  getForeignKeyConstraints  to get only foreign key constraints.       Param  Type  Description      [callback]  orderedConstraintCallback  Callback to be executed for each constraint.     Example     table.getConstraints(function(constraint, i, collection) {\n    var name = constraint.name;\n    var ord  = i;\n);   table.getForeignKeyConstraints([callback]) \u21d2  Array. Constraint     undefined     null  Retrieves all  constraints  which are foreign key constraints in the table, executes given callback and returns null, if provided. Callback has a signature of\n( Constraint , index, collection). If no callback is provided, returns an array of all foreign key  constraints .  Kind : instance method of  Table  Returns :  Array. Constraint     undefined     null  - - All foreign key  constraints  of the table.  See   getO2MRelations ,  getM2MRelations  to get more details about  relations .  getConstraints  to get all constraints.      Param  Type  Description      [callback]  orderedConstraintCallback  Callback to be executed for each constraint.     Example     table.getConstraints(function(constraint, i, collection) {\n    var name = constraint.name;\n    var ord  = i;\n);   table.getForeignKeyColumns([callback]) \u21d2  Array. Column     undefined     null  Retrieves all foreign key  columns  of all foreign key  constraints  in the table, executes given callback and returns null, if provided. Callback has a signature of\n( Column , index, collection). If no callback is provided, returns an array of all foreign key  columns .  Kind : instance method of  Table  Returns :  Array. Column     undefined     null  - - All foreign key  columns  of the table.       Param  Type  Description      [callback]  orderedColumnCallback  Callback to be executed for each column.     Example     table.getForeignKeyColumns(function(column, i, collection) {\n    var name = column.name;\n    var ord  = i;\n);   table.getPrimaryKeyColumns([callback]) \u21d2  Array. Column     undefined     null  Retrieves all primary key  columns  in the table, executes given callback and returns null, if provided. Callback has a signature of\n( Column , index, collection). If no callback is provided, returns an array of all primary key  columns .  Kind : instance method of  Table  Returns :  Array. Column     undefined     null  - - All primary key  columns  of the table.       Param  Type  Description      [callback]  orderedColumnCallback  Callback to be executed for each column.     Example     table.getPrimaryKeyColumns(function(column, i, collection) {\n    var name = column.name;\n    var ord  = i;\n);   table.getPrimaryKeyConstraint([callback]) \u21d2  Array. Constraint     undefined     null  Retrieves  primary key constraint  of the table and executes given callback and returns null, if provided. Callback has a signature of\n( Constraint , index, collection). If no callback is provided, returns single element array of primary key  constraint .  Kind : instance method of  Table  Returns :  Array. Constraint     undefined     null  - - Primary key  constraint  of the table.       Param  Type  Description      [callback]  orderedConstraintCallback  Callback to be executed for single constraint.     Example     table.getPrimaryKeyConstraint(function(constraint, i, collection) {\n    var name = constraint.name;\n    var ord  = i;\n);   table.getHasManyTables([callback]) \u21d2  Array. Column     undefined     null  Retrieves all  tables  which this table has relationship of type  one to many , executes given callback and returns null if provided.\nCallback has a signature of ( Table , index, collection). If no callback is provided, returns an array of all  tables .  Kind : instance method of  Table  Returns :  Array. Column     undefined     null  - - All  tables  which this table has relationship of type  one to many .       Param  Type  Description      [callback]  orderedTableCallback  Callback to be executed for each  table .      table.getBelongsToTables([callback]) \u21d2  Array. Column     undefined     null  Retrieves all  tables  which this table has relationship of type  one to many  which is reverse direction of  one to many , executes given callback and returns null if provided.\nCallback has a signature of ( Table , index, collection). If no callback is provided, returns an array of all  tables .  Kind : instance method of  Table  Returns :  Array. Column     undefined     null  - - All  tables  which this table has relationship of type  one to many .       Param  Type  Description      [callback]  orderedTableCallback  Callback to be executed for each  table .      table.getBelongsToManyTables([callback]) \u21d2  Array. Column     undefined     null  Retrieves all  tables  which this table has relationship of type  many to many , executes given callback and returns null if provided.\nCallback has a signature of ( Table , index, collection). If no callback is provided, returns an array of all  tables .  Kind : instance method of  Table  Returns :  Array. Column     undefined     null  - - All  tables  which this table has relationship of type  many to many .       Param  Type  Description      [callback]  orderedTableCallback  Callback to be executed for each  table .      table.getM2MRelations([callback]) \u21d2  Array. M2MRelation     undefined     null  List of  many to many relationships  of the table.  M2MRelation  resembles has many through  and  belongs to many  relations in ORMs has some useful methods and information for generating ORM classes.  Kind : instance method of  Table  Returns :  Array. M2MRelation     undefined     null  - -  M2M Relations  of the table.       Param  Type  Description      [callback]  orderedRelationCallback  Callback to be executed for each  many to many relation .      table.getO2MRelations([callback]) \u21d2  Array. O2MRelation     undefined     null  List of  one to many relationships  of the table.  O2MRelation  resembles has many  relations in ORMs and has some useful methods and information for generating ORM classes.  Kind : instance method of  Table  Returns :  Array. O2MRelation     undefined     null  - -  O2M Relations  of the table.       Param  Type  Description      [callback]  orderedRelationCallback  Callback to be executed for each  one to many relation .      table.getM2ORelations([callback]) \u21d2  Array. M2ORelation     undefined     null  List of  many to one relationships  of the table.  M2ORelation  resembles belongs to  relations in ORMs and has some useful methods and information for generating ORM classes.  Kind : instance method of  Table  Returns :  Array. M2ORelation     undefined     null  - -  M2O Relations  of the table.       Param  Type  Description      [callback]  orderedRelationCallback  Callback to be executed for each  many to one relation .      table.getIndexes([callback]) \u21d2  Array. Index     undefined     null  Executes callback for every  Index  or returns list of  indexes , which this table has.\nResults are ordered by index name.  Kind : instance method of  Table  Returns :  Array. Index     undefined     null  - -  indexes  this table has.       Param  Type  Description      [callback]  orderedIndexCallback  Callback to be executed for each  Index .", 
            "title": "Table"
        }
    ]
}